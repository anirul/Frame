// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: level.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_level_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_level_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "texture.pb.h"
#include "program.pb.h"
#include "scene.pb.h"
#include "material.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_level_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_level_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_level_2eproto;
namespace frame {
namespace proto {
class Level;
struct LevelDefaultTypeInternal;
extern LevelDefaultTypeInternal _Level_default_instance_;
}  // namespace proto
}  // namespace frame
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace frame {
namespace proto {

// ===================================================================


// -------------------------------------------------------------------

class Level final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frame.proto.Level) */ {
 public:
  inline Level() : Level(nullptr) {}
  ~Level() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Level(::google::protobuf::internal::ConstantInitialized);

  inline Level(const Level& from)
      : Level(nullptr, from) {}
  Level(Level&& from) noexcept
    : Level() {
    *this = ::std::move(from);
  }

  inline Level& operator=(const Level& from) {
    CopyFrom(from);
    return *this;
  }
  inline Level& operator=(Level&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Level& default_instance() {
    return *internal_default_instance();
  }
  static inline const Level* internal_default_instance() {
    return reinterpret_cast<const Level*>(
               &_Level_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Level& a, Level& b) {
    a.Swap(&b);
  }
  inline void Swap(Level* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Level* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Level* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Level>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Level& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Level& from) {
    Level::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Level* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "frame.proto.Level";
  }
  protected:
  explicit Level(::google::protobuf::Arena* arena);
  Level(::google::protobuf::Arena* arena, const Level& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTexturesFieldNumber = 5,
    kProgramsFieldNumber = 6,
    kMaterialsFieldNumber = 8,
    kNameFieldNumber = 1,
    kDefaultTextureNameFieldNumber = 2,
    kSceneTreeFieldNumber = 7,
  };
  // repeated .frame.proto.Texture textures = 5;
  int textures_size() const;
  private:
  int _internal_textures_size() const;

  public:
  void clear_textures() ;
  ::frame::proto::Texture* mutable_textures(int index);
  ::google::protobuf::RepeatedPtrField< ::frame::proto::Texture >*
      mutable_textures();
  private:
  const ::google::protobuf::RepeatedPtrField<::frame::proto::Texture>& _internal_textures() const;
  ::google::protobuf::RepeatedPtrField<::frame::proto::Texture>* _internal_mutable_textures();
  public:
  const ::frame::proto::Texture& textures(int index) const;
  ::frame::proto::Texture* add_textures();
  const ::google::protobuf::RepeatedPtrField< ::frame::proto::Texture >&
      textures() const;
  // repeated .frame.proto.Program programs = 6;
  int programs_size() const;
  private:
  int _internal_programs_size() const;

  public:
  void clear_programs() ;
  ::frame::proto::Program* mutable_programs(int index);
  ::google::protobuf::RepeatedPtrField< ::frame::proto::Program >*
      mutable_programs();
  private:
  const ::google::protobuf::RepeatedPtrField<::frame::proto::Program>& _internal_programs() const;
  ::google::protobuf::RepeatedPtrField<::frame::proto::Program>* _internal_mutable_programs();
  public:
  const ::frame::proto::Program& programs(int index) const;
  ::frame::proto::Program* add_programs();
  const ::google::protobuf::RepeatedPtrField< ::frame::proto::Program >&
      programs() const;
  // repeated .frame.proto.Material materials = 8;
  int materials_size() const;
  private:
  int _internal_materials_size() const;

  public:
  void clear_materials() ;
  ::frame::proto::Material* mutable_materials(int index);
  ::google::protobuf::RepeatedPtrField< ::frame::proto::Material >*
      mutable_materials();
  private:
  const ::google::protobuf::RepeatedPtrField<::frame::proto::Material>& _internal_materials() const;
  ::google::protobuf::RepeatedPtrField<::frame::proto::Material>* _internal_mutable_materials();
  public:
  const ::frame::proto::Material& materials(int index) const;
  ::frame::proto::Material* add_materials();
  const ::google::protobuf::RepeatedPtrField< ::frame::proto::Material >&
      materials() const;
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string default_texture_name = 2;
  void clear_default_texture_name() ;
  const std::string& default_texture_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_default_texture_name(Arg_&& arg, Args_... args);
  std::string* mutable_default_texture_name();
  PROTOBUF_NODISCARD std::string* release_default_texture_name();
  void set_allocated_default_texture_name(std::string* value);

  private:
  const std::string& _internal_default_texture_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_texture_name(
      const std::string& value);
  std::string* _internal_mutable_default_texture_name();

  public:
  // .frame.proto.SceneTree scene_tree = 7;
  bool has_scene_tree() const;
  void clear_scene_tree() ;
  const ::frame::proto::SceneTree& scene_tree() const;
  PROTOBUF_NODISCARD ::frame::proto::SceneTree* release_scene_tree();
  ::frame::proto::SceneTree* mutable_scene_tree();
  void set_allocated_scene_tree(::frame::proto::SceneTree* value);
  void unsafe_arena_set_allocated_scene_tree(::frame::proto::SceneTree* value);
  ::frame::proto::SceneTree* unsafe_arena_release_scene_tree();

  private:
  const ::frame::proto::SceneTree& _internal_scene_tree() const;
  ::frame::proto::SceneTree* _internal_mutable_scene_tree();

  public:
  // @@protoc_insertion_point(class_scope:frame.proto.Level)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 4,
      50, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::frame::proto::Texture > textures_;
    ::google::protobuf::RepeatedPtrField< ::frame::proto::Program > programs_;
    ::google::protobuf::RepeatedPtrField< ::frame::proto::Material > materials_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr default_texture_name_;
    ::frame::proto::SceneTree* scene_tree_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_level_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Level

// string name = 1;
inline void Level::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Level::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Level.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Level::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:frame.proto.Level.name)
}
inline std::string* Level::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:frame.proto.Level.name)
  return _s;
}
inline const std::string& Level::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Level::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Level::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Level::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:frame.proto.Level.name)
  return _impl_.name_.Release();
}
inline void Level::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Level.name)
}

// string default_texture_name = 2;
inline void Level::clear_default_texture_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.default_texture_name_.ClearToEmpty();
}
inline const std::string& Level::default_texture_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Level.default_texture_name)
  return _internal_default_texture_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Level::set_default_texture_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.default_texture_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:frame.proto.Level.default_texture_name)
}
inline std::string* Level::mutable_default_texture_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_default_texture_name();
  // @@protoc_insertion_point(field_mutable:frame.proto.Level.default_texture_name)
  return _s;
}
inline const std::string& Level::_internal_default_texture_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.default_texture_name_.Get();
}
inline void Level::_internal_set_default_texture_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.default_texture_name_.Set(value, GetArena());
}
inline std::string* Level::_internal_mutable_default_texture_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.default_texture_name_.Mutable( GetArena());
}
inline std::string* Level::release_default_texture_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:frame.proto.Level.default_texture_name)
  return _impl_.default_texture_name_.Release();
}
inline void Level::set_allocated_default_texture_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.default_texture_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.default_texture_name_.IsDefault()) {
          _impl_.default_texture_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Level.default_texture_name)
}

// repeated .frame.proto.Texture textures = 5;
inline int Level::_internal_textures_size() const {
  return _internal_textures().size();
}
inline int Level::textures_size() const {
  return _internal_textures_size();
}
inline ::frame::proto::Texture* Level::mutable_textures(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:frame.proto.Level.textures)
  return _internal_mutable_textures()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::frame::proto::Texture>* Level::mutable_textures()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:frame.proto.Level.textures)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_textures();
}
inline const ::frame::proto::Texture& Level::textures(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Level.textures)
  return _internal_textures().Get(index);
}
inline ::frame::proto::Texture* Level::add_textures() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::frame::proto::Texture* _add = _internal_mutable_textures()->Add();
  // @@protoc_insertion_point(field_add:frame.proto.Level.textures)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::frame::proto::Texture>& Level::textures() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:frame.proto.Level.textures)
  return _internal_textures();
}
inline const ::google::protobuf::RepeatedPtrField<::frame::proto::Texture>&
Level::_internal_textures() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.textures_;
}
inline ::google::protobuf::RepeatedPtrField<::frame::proto::Texture>*
Level::_internal_mutable_textures() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.textures_;
}

// repeated .frame.proto.Program programs = 6;
inline int Level::_internal_programs_size() const {
  return _internal_programs().size();
}
inline int Level::programs_size() const {
  return _internal_programs_size();
}
inline ::frame::proto::Program* Level::mutable_programs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:frame.proto.Level.programs)
  return _internal_mutable_programs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::frame::proto::Program>* Level::mutable_programs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:frame.proto.Level.programs)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_programs();
}
inline const ::frame::proto::Program& Level::programs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Level.programs)
  return _internal_programs().Get(index);
}
inline ::frame::proto::Program* Level::add_programs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::frame::proto::Program* _add = _internal_mutable_programs()->Add();
  // @@protoc_insertion_point(field_add:frame.proto.Level.programs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::frame::proto::Program>& Level::programs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:frame.proto.Level.programs)
  return _internal_programs();
}
inline const ::google::protobuf::RepeatedPtrField<::frame::proto::Program>&
Level::_internal_programs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.programs_;
}
inline ::google::protobuf::RepeatedPtrField<::frame::proto::Program>*
Level::_internal_mutable_programs() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.programs_;
}

// .frame.proto.SceneTree scene_tree = 7;
inline bool Level::has_scene_tree() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.scene_tree_ != nullptr);
  return value;
}
inline const ::frame::proto::SceneTree& Level::_internal_scene_tree() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::frame::proto::SceneTree* p = _impl_.scene_tree_;
  return p != nullptr ? *p : reinterpret_cast<const ::frame::proto::SceneTree&>(::frame::proto::_SceneTree_default_instance_);
}
inline const ::frame::proto::SceneTree& Level::scene_tree() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Level.scene_tree)
  return _internal_scene_tree();
}
inline void Level::unsafe_arena_set_allocated_scene_tree(::frame::proto::SceneTree* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.scene_tree_);
  }
  _impl_.scene_tree_ = reinterpret_cast<::frame::proto::SceneTree*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Level.scene_tree)
}
inline ::frame::proto::SceneTree* Level::release_scene_tree() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::frame::proto::SceneTree* released = _impl_.scene_tree_;
  _impl_.scene_tree_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::frame::proto::SceneTree* Level::unsafe_arena_release_scene_tree() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:frame.proto.Level.scene_tree)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::frame::proto::SceneTree* temp = _impl_.scene_tree_;
  _impl_.scene_tree_ = nullptr;
  return temp;
}
inline ::frame::proto::SceneTree* Level::_internal_mutable_scene_tree() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.scene_tree_ == nullptr) {
    auto* p = CreateMaybeMessage<::frame::proto::SceneTree>(GetArena());
    _impl_.scene_tree_ = reinterpret_cast<::frame::proto::SceneTree*>(p);
  }
  return _impl_.scene_tree_;
}
inline ::frame::proto::SceneTree* Level::mutable_scene_tree() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::frame::proto::SceneTree* _msg = _internal_mutable_scene_tree();
  // @@protoc_insertion_point(field_mutable:frame.proto.Level.scene_tree)
  return _msg;
}
inline void Level::set_allocated_scene_tree(::frame::proto::SceneTree* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.scene_tree_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.scene_tree_ = reinterpret_cast<::frame::proto::SceneTree*>(value);
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Level.scene_tree)
}

// repeated .frame.proto.Material materials = 8;
inline int Level::_internal_materials_size() const {
  return _internal_materials().size();
}
inline int Level::materials_size() const {
  return _internal_materials_size();
}
inline ::frame::proto::Material* Level::mutable_materials(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:frame.proto.Level.materials)
  return _internal_mutable_materials()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::frame::proto::Material>* Level::mutable_materials()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:frame.proto.Level.materials)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_materials();
}
inline const ::frame::proto::Material& Level::materials(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Level.materials)
  return _internal_materials().Get(index);
}
inline ::frame::proto::Material* Level::add_materials() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::frame::proto::Material* _add = _internal_mutable_materials()->Add();
  // @@protoc_insertion_point(field_add:frame.proto.Level.materials)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::frame::proto::Material>& Level::materials() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:frame.proto.Level.materials)
  return _internal_materials();
}
inline const ::google::protobuf::RepeatedPtrField<::frame::proto::Material>&
Level::_internal_materials() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.materials_;
}
inline ::google::protobuf::RepeatedPtrField<::frame::proto::Material>*
Level::_internal_mutable_materials() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.materials_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace frame


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_level_2eproto_2epb_2eh
