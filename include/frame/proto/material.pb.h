// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: material.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_material_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_material_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_material_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_material_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_material_2eproto;
namespace frame {
namespace proto {
class Material;
struct MaterialDefaultTypeInternal;
extern MaterialDefaultTypeInternal _Material_default_instance_;
}  // namespace proto
}  // namespace frame
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace frame {
namespace proto {

// ===================================================================


// -------------------------------------------------------------------

class Material final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frame.proto.Material) */ {
 public:
  inline Material() : Material(nullptr) {}
  ~Material() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Material(::google::protobuf::internal::ConstantInitialized);

  inline Material(const Material& from)
      : Material(nullptr, from) {}
  Material(Material&& from) noexcept
    : Material() {
    *this = ::std::move(from);
  }

  inline Material& operator=(const Material& from) {
    CopyFrom(from);
    return *this;
  }
  inline Material& operator=(Material&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Material& default_instance() {
    return *internal_default_instance();
  }
  static inline const Material* internal_default_instance() {
    return reinterpret_cast<const Material*>(
               &_Material_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Material& a, Material& b) {
    a.Swap(&b);
  }
  inline void Swap(Material* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Material* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Material* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Material>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Material& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Material& from) {
    Material::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Material* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "frame.proto.Material";
  }
  protected:
  explicit Material(::google::protobuf::Arena* arena);
  Material(::google::protobuf::Arena* arena, const Material& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextureNamesFieldNumber = 3,
    kInnerNamesFieldNumber = 4,
    kNameFieldNumber = 1,
    kProgramNameFieldNumber = 5,
  };
  // repeated string texture_names = 3;
  int texture_names_size() const;
  private:
  int _internal_texture_names_size() const;

  public:
  void clear_texture_names() ;
  const std::string& texture_names(int index) const;
  std::string* mutable_texture_names(int index);
  void set_texture_names(int index, const std::string& value);
  void set_texture_names(int index, std::string&& value);
  void set_texture_names(int index, const char* value);
  void set_texture_names(int index, const char* value, std::size_t size);
  void set_texture_names(int index, absl::string_view value);
  std::string* add_texture_names();
  void add_texture_names(const std::string& value);
  void add_texture_names(std::string&& value);
  void add_texture_names(const char* value);
  void add_texture_names(const char* value, std::size_t size);
  void add_texture_names(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& texture_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_texture_names();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_texture_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_texture_names();

  public:
  // repeated string inner_names = 4;
  int inner_names_size() const;
  private:
  int _internal_inner_names_size() const;

  public:
  void clear_inner_names() ;
  const std::string& inner_names(int index) const;
  std::string* mutable_inner_names(int index);
  void set_inner_names(int index, const std::string& value);
  void set_inner_names(int index, std::string&& value);
  void set_inner_names(int index, const char* value);
  void set_inner_names(int index, const char* value, std::size_t size);
  void set_inner_names(int index, absl::string_view value);
  std::string* add_inner_names();
  void add_inner_names(const std::string& value);
  void add_inner_names(std::string&& value);
  void add_inner_names(const char* value);
  void add_inner_names(const char* value, std::size_t size);
  void add_inner_names(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& inner_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_inner_names();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_inner_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_inner_names();

  public:
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string program_name = 5;
  void clear_program_name() ;
  const std::string& program_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_program_name(Arg_&& arg, Args_... args);
  std::string* mutable_program_name();
  PROTOBUF_NODISCARD std::string* release_program_name();
  void set_allocated_program_name(std::string* value);

  private:
  const std::string& _internal_program_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_program_name(
      const std::string& value);
  std::string* _internal_mutable_program_name();

  public:
  // @@protoc_insertion_point(class_scope:frame.proto.Material)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 4, 0,
      69, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> texture_names_;
    ::google::protobuf::RepeatedPtrField<std::string> inner_names_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr program_name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_material_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Material

// string name = 1;
inline void Material::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Material::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Material.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Material::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:frame.proto.Material.name)
}
inline std::string* Material::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:frame.proto.Material.name)
  return _s;
}
inline const std::string& Material::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Material::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Material::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Material::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:frame.proto.Material.name)
  return _impl_.name_.Release();
}
inline void Material::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Material.name)
}

// string program_name = 5;
inline void Material::clear_program_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.program_name_.ClearToEmpty();
}
inline const std::string& Material::program_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Material.program_name)
  return _internal_program_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Material::set_program_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.program_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:frame.proto.Material.program_name)
}
inline std::string* Material::mutable_program_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_program_name();
  // @@protoc_insertion_point(field_mutable:frame.proto.Material.program_name)
  return _s;
}
inline const std::string& Material::_internal_program_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.program_name_.Get();
}
inline void Material::_internal_set_program_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.program_name_.Set(value, GetArena());
}
inline std::string* Material::_internal_mutable_program_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.program_name_.Mutable( GetArena());
}
inline std::string* Material::release_program_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:frame.proto.Material.program_name)
  return _impl_.program_name_.Release();
}
inline void Material::set_allocated_program_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.program_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.program_name_.IsDefault()) {
          _impl_.program_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Material.program_name)
}

// repeated string texture_names = 3;
inline int Material::_internal_texture_names_size() const {
  return _internal_texture_names().size();
}
inline int Material::texture_names_size() const {
  return _internal_texture_names_size();
}
inline void Material::clear_texture_names() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.texture_names_.Clear();
}
inline std::string* Material::add_texture_names()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_texture_names()->Add();
  // @@protoc_insertion_point(field_add_mutable:frame.proto.Material.texture_names)
  return _s;
}
inline const std::string& Material::texture_names(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Material.texture_names)
  return _internal_texture_names().Get(index);
}
inline std::string* Material::mutable_texture_names(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:frame.proto.Material.texture_names)
  return _internal_mutable_texture_names()->Mutable(index);
}
inline void Material::set_texture_names(int index, const std::string& value) {
  _internal_mutable_texture_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:frame.proto.Material.texture_names)
}
inline void Material::set_texture_names(int index, std::string&& value) {
  _internal_mutable_texture_names()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:frame.proto.Material.texture_names)
}
inline void Material::set_texture_names(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_texture_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:frame.proto.Material.texture_names)
}
inline void Material::set_texture_names(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_texture_names()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:frame.proto.Material.texture_names)
}
inline void Material::set_texture_names(int index, absl::string_view value) {
  _internal_mutable_texture_names()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:frame.proto.Material.texture_names)
}
inline void Material::add_texture_names(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_texture_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:frame.proto.Material.texture_names)
}
inline void Material::add_texture_names(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_texture_names()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:frame.proto.Material.texture_names)
}
inline void Material::add_texture_names(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_texture_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:frame.proto.Material.texture_names)
}
inline void Material::add_texture_names(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_texture_names()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:frame.proto.Material.texture_names)
}
inline void Material::add_texture_names(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_texture_names()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:frame.proto.Material.texture_names)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Material::texture_names() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:frame.proto.Material.texture_names)
  return _internal_texture_names();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Material::mutable_texture_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:frame.proto.Material.texture_names)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_texture_names();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Material::_internal_texture_names() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.texture_names_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Material::_internal_mutable_texture_names() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.texture_names_;
}

// repeated string inner_names = 4;
inline int Material::_internal_inner_names_size() const {
  return _internal_inner_names().size();
}
inline int Material::inner_names_size() const {
  return _internal_inner_names_size();
}
inline void Material::clear_inner_names() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.inner_names_.Clear();
}
inline std::string* Material::add_inner_names()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_inner_names()->Add();
  // @@protoc_insertion_point(field_add_mutable:frame.proto.Material.inner_names)
  return _s;
}
inline const std::string& Material::inner_names(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Material.inner_names)
  return _internal_inner_names().Get(index);
}
inline std::string* Material::mutable_inner_names(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:frame.proto.Material.inner_names)
  return _internal_mutable_inner_names()->Mutable(index);
}
inline void Material::set_inner_names(int index, const std::string& value) {
  _internal_mutable_inner_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:frame.proto.Material.inner_names)
}
inline void Material::set_inner_names(int index, std::string&& value) {
  _internal_mutable_inner_names()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:frame.proto.Material.inner_names)
}
inline void Material::set_inner_names(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_inner_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:frame.proto.Material.inner_names)
}
inline void Material::set_inner_names(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_inner_names()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:frame.proto.Material.inner_names)
}
inline void Material::set_inner_names(int index, absl::string_view value) {
  _internal_mutable_inner_names()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:frame.proto.Material.inner_names)
}
inline void Material::add_inner_names(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_inner_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:frame.proto.Material.inner_names)
}
inline void Material::add_inner_names(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_inner_names()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:frame.proto.Material.inner_names)
}
inline void Material::add_inner_names(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_inner_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:frame.proto.Material.inner_names)
}
inline void Material::add_inner_names(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_inner_names()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:frame.proto.Material.inner_names)
}
inline void Material::add_inner_names(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_inner_names()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:frame.proto.Material.inner_names)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Material::inner_names() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:frame.proto.Material.inner_names)
  return _internal_inner_names();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Material::mutable_inner_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:frame.proto.Material.inner_names)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_inner_names();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Material::_internal_inner_names() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.inner_names_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Material::_internal_mutable_inner_names() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.inner_names_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace frame


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_material_2eproto_2epb_2eh
