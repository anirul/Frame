// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pixel.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_pixel_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_pixel_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_pixel_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_pixel_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_pixel_2eproto;
namespace frame {
namespace proto {
class CleanBuffer;
struct CleanBufferDefaultTypeInternal;
extern CleanBufferDefaultTypeInternal _CleanBuffer_default_instance_;
class PixelDepthComponent;
struct PixelDepthComponentDefaultTypeInternal;
extern PixelDepthComponentDefaultTypeInternal _PixelDepthComponent_default_instance_;
class PixelElementSize;
struct PixelElementSizeDefaultTypeInternal;
extern PixelElementSizeDefaultTypeInternal _PixelElementSize_default_instance_;
class PixelStructure;
struct PixelStructureDefaultTypeInternal;
extern PixelStructureDefaultTypeInternal _PixelStructure_default_instance_;
}  // namespace proto
}  // namespace frame
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace frame {
namespace proto {
enum CleanBuffer_Enum : int {
  CleanBuffer_Enum_INVALID = 0,
  CleanBuffer_Enum_CLEAR_COLOR = 1,
  CleanBuffer_Enum_CLEAR_DEPTH = 2,
  CleanBuffer_Enum_CleanBuffer_Enum_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CleanBuffer_Enum_CleanBuffer_Enum_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CleanBuffer_Enum_IsValid(int value);
extern const uint32_t CleanBuffer_Enum_internal_data_[];
constexpr CleanBuffer_Enum CleanBuffer_Enum_Enum_MIN = static_cast<CleanBuffer_Enum>(0);
constexpr CleanBuffer_Enum CleanBuffer_Enum_Enum_MAX = static_cast<CleanBuffer_Enum>(2);
constexpr int CleanBuffer_Enum_Enum_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
CleanBuffer_Enum_descriptor();
template <typename T>
const std::string& CleanBuffer_Enum_Name(T value) {
  static_assert(std::is_same<T, CleanBuffer_Enum>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Enum_Name().");
  return CleanBuffer_Enum_Name(static_cast<CleanBuffer_Enum>(value));
}
template <>
inline const std::string& CleanBuffer_Enum_Name(CleanBuffer_Enum value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CleanBuffer_Enum_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool CleanBuffer_Enum_Parse(absl::string_view name, CleanBuffer_Enum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CleanBuffer_Enum>(
      CleanBuffer_Enum_descriptor(), name, value);
}
enum PixelElementSize_Enum : int {
  PixelElementSize_Enum_INVALID = 0,
  PixelElementSize_Enum_BYTE = 1,
  PixelElementSize_Enum_SHORT = 2,
  PixelElementSize_Enum_HALF = 3,
  PixelElementSize_Enum_FLOAT = 4,
  PixelElementSize_Enum_PixelElementSize_Enum_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PixelElementSize_Enum_PixelElementSize_Enum_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PixelElementSize_Enum_IsValid(int value);
extern const uint32_t PixelElementSize_Enum_internal_data_[];
constexpr PixelElementSize_Enum PixelElementSize_Enum_Enum_MIN = static_cast<PixelElementSize_Enum>(0);
constexpr PixelElementSize_Enum PixelElementSize_Enum_Enum_MAX = static_cast<PixelElementSize_Enum>(4);
constexpr int PixelElementSize_Enum_Enum_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
PixelElementSize_Enum_descriptor();
template <typename T>
const std::string& PixelElementSize_Enum_Name(T value) {
  static_assert(std::is_same<T, PixelElementSize_Enum>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Enum_Name().");
  return PixelElementSize_Enum_Name(static_cast<PixelElementSize_Enum>(value));
}
template <>
inline const std::string& PixelElementSize_Enum_Name(PixelElementSize_Enum value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PixelElementSize_Enum_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool PixelElementSize_Enum_Parse(absl::string_view name, PixelElementSize_Enum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PixelElementSize_Enum>(
      PixelElementSize_Enum_descriptor(), name, value);
}
enum PixelStructure_Enum : int {
  PixelStructure_Enum_INVALID = 0,
  PixelStructure_Enum_GREY = 1,
  PixelStructure_Enum_GREY_ALPHA = 2,
  PixelStructure_Enum_RGB = 3,
  PixelStructure_Enum_RGB_ALPHA = 4,
  PixelStructure_Enum_BGR = 5,
  PixelStructure_Enum_BGR_ALPHA = 6,
  PixelStructure_Enum_PixelStructure_Enum_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PixelStructure_Enum_PixelStructure_Enum_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PixelStructure_Enum_IsValid(int value);
extern const uint32_t PixelStructure_Enum_internal_data_[];
constexpr PixelStructure_Enum PixelStructure_Enum_Enum_MIN = static_cast<PixelStructure_Enum>(0);
constexpr PixelStructure_Enum PixelStructure_Enum_Enum_MAX = static_cast<PixelStructure_Enum>(6);
constexpr int PixelStructure_Enum_Enum_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
PixelStructure_Enum_descriptor();
template <typename T>
const std::string& PixelStructure_Enum_Name(T value) {
  static_assert(std::is_same<T, PixelStructure_Enum>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Enum_Name().");
  return PixelStructure_Enum_Name(static_cast<PixelStructure_Enum>(value));
}
template <>
inline const std::string& PixelStructure_Enum_Name(PixelStructure_Enum value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PixelStructure_Enum_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool PixelStructure_Enum_Parse(absl::string_view name, PixelStructure_Enum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PixelStructure_Enum>(
      PixelStructure_Enum_descriptor(), name, value);
}
enum PixelDepthComponent_Enum : int {
  PixelDepthComponent_Enum_INVALID = 0,
  PixelDepthComponent_Enum_DEPTH_COMPONENT8 = 1,
  PixelDepthComponent_Enum_DEPTH_COMPONENT16 = 2,
  PixelDepthComponent_Enum_DEPTH_COMPONENT24 = 3,
  PixelDepthComponent_Enum_DEPTH_COMPONENT32 = 4,
  PixelDepthComponent_Enum_PixelDepthComponent_Enum_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PixelDepthComponent_Enum_PixelDepthComponent_Enum_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PixelDepthComponent_Enum_IsValid(int value);
extern const uint32_t PixelDepthComponent_Enum_internal_data_[];
constexpr PixelDepthComponent_Enum PixelDepthComponent_Enum_Enum_MIN = static_cast<PixelDepthComponent_Enum>(0);
constexpr PixelDepthComponent_Enum PixelDepthComponent_Enum_Enum_MAX = static_cast<PixelDepthComponent_Enum>(4);
constexpr int PixelDepthComponent_Enum_Enum_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
PixelDepthComponent_Enum_descriptor();
template <typename T>
const std::string& PixelDepthComponent_Enum_Name(T value) {
  static_assert(std::is_same<T, PixelDepthComponent_Enum>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Enum_Name().");
  return PixelDepthComponent_Enum_Name(static_cast<PixelDepthComponent_Enum>(value));
}
template <>
inline const std::string& PixelDepthComponent_Enum_Name(PixelDepthComponent_Enum value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PixelDepthComponent_Enum_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool PixelDepthComponent_Enum_Parse(absl::string_view name, PixelDepthComponent_Enum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PixelDepthComponent_Enum>(
      PixelDepthComponent_Enum_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class PixelStructure final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frame.proto.PixelStructure) */ {
 public:
  inline PixelStructure() : PixelStructure(nullptr) {}
  ~PixelStructure() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PixelStructure(::google::protobuf::internal::ConstantInitialized);

  inline PixelStructure(const PixelStructure& from)
      : PixelStructure(nullptr, from) {}
  PixelStructure(PixelStructure&& from) noexcept
    : PixelStructure() {
    *this = ::std::move(from);
  }

  inline PixelStructure& operator=(const PixelStructure& from) {
    CopyFrom(from);
    return *this;
  }
  inline PixelStructure& operator=(PixelStructure&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PixelStructure& default_instance() {
    return *internal_default_instance();
  }
  static inline const PixelStructure* internal_default_instance() {
    return reinterpret_cast<const PixelStructure*>(
               &_PixelStructure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PixelStructure& a, PixelStructure& b) {
    a.Swap(&b);
  }
  inline void Swap(PixelStructure* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PixelStructure* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PixelStructure* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PixelStructure>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PixelStructure& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PixelStructure& from) {
    PixelStructure::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PixelStructure* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "frame.proto.PixelStructure";
  }
  protected:
  explicit PixelStructure(::google::protobuf::Arena* arena);
  PixelStructure(::google::protobuf::Arena* arena, const PixelStructure& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Enum = PixelStructure_Enum;
  static constexpr Enum INVALID = PixelStructure_Enum_INVALID;
  static constexpr Enum GREY = PixelStructure_Enum_GREY;
  static constexpr Enum GREY_ALPHA = PixelStructure_Enum_GREY_ALPHA;
  static constexpr Enum RGB = PixelStructure_Enum_RGB;
  static constexpr Enum RGB_ALPHA = PixelStructure_Enum_RGB_ALPHA;
  static constexpr Enum BGR = PixelStructure_Enum_BGR;
  static constexpr Enum BGR_ALPHA = PixelStructure_Enum_BGR_ALPHA;
  static inline bool Enum_IsValid(int value) {
    return PixelStructure_Enum_IsValid(value);
  }
  static constexpr Enum Enum_MIN = PixelStructure_Enum_Enum_MIN;
  static constexpr Enum Enum_MAX = PixelStructure_Enum_Enum_MAX;
  static constexpr int Enum_ARRAYSIZE = PixelStructure_Enum_Enum_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Enum_descriptor() {
    return PixelStructure_Enum_descriptor();
  }
  template <typename T>
  static inline const std::string& Enum_Name(T value) {
    return PixelStructure_Enum_Name(value);
  }
  static inline bool Enum_Parse(absl::string_view name, Enum* value) {
    return PixelStructure_Enum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .frame.proto.PixelStructure.Enum value = 1;
  void clear_value() ;
  ::frame::proto::PixelStructure_Enum value() const;
  void set_value(::frame::proto::PixelStructure_Enum value);

  private:
  ::frame::proto::PixelStructure_Enum _internal_value() const;
  void _internal_set_value(::frame::proto::PixelStructure_Enum value);

  public:
  // @@protoc_insertion_point(class_scope:frame.proto.PixelStructure)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    int value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pixel_2eproto;
};// -------------------------------------------------------------------

class PixelElementSize final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frame.proto.PixelElementSize) */ {
 public:
  inline PixelElementSize() : PixelElementSize(nullptr) {}
  ~PixelElementSize() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PixelElementSize(::google::protobuf::internal::ConstantInitialized);

  inline PixelElementSize(const PixelElementSize& from)
      : PixelElementSize(nullptr, from) {}
  PixelElementSize(PixelElementSize&& from) noexcept
    : PixelElementSize() {
    *this = ::std::move(from);
  }

  inline PixelElementSize& operator=(const PixelElementSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline PixelElementSize& operator=(PixelElementSize&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PixelElementSize& default_instance() {
    return *internal_default_instance();
  }
  static inline const PixelElementSize* internal_default_instance() {
    return reinterpret_cast<const PixelElementSize*>(
               &_PixelElementSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PixelElementSize& a, PixelElementSize& b) {
    a.Swap(&b);
  }
  inline void Swap(PixelElementSize* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PixelElementSize* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PixelElementSize* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PixelElementSize>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PixelElementSize& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PixelElementSize& from) {
    PixelElementSize::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PixelElementSize* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "frame.proto.PixelElementSize";
  }
  protected:
  explicit PixelElementSize(::google::protobuf::Arena* arena);
  PixelElementSize(::google::protobuf::Arena* arena, const PixelElementSize& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Enum = PixelElementSize_Enum;
  static constexpr Enum INVALID = PixelElementSize_Enum_INVALID;
  static constexpr Enum BYTE = PixelElementSize_Enum_BYTE;
  static constexpr Enum SHORT = PixelElementSize_Enum_SHORT;
  static constexpr Enum HALF = PixelElementSize_Enum_HALF;
  static constexpr Enum FLOAT = PixelElementSize_Enum_FLOAT;
  static inline bool Enum_IsValid(int value) {
    return PixelElementSize_Enum_IsValid(value);
  }
  static constexpr Enum Enum_MIN = PixelElementSize_Enum_Enum_MIN;
  static constexpr Enum Enum_MAX = PixelElementSize_Enum_Enum_MAX;
  static constexpr int Enum_ARRAYSIZE = PixelElementSize_Enum_Enum_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Enum_descriptor() {
    return PixelElementSize_Enum_descriptor();
  }
  template <typename T>
  static inline const std::string& Enum_Name(T value) {
    return PixelElementSize_Enum_Name(value);
  }
  static inline bool Enum_Parse(absl::string_view name, Enum* value) {
    return PixelElementSize_Enum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .frame.proto.PixelElementSize.Enum value = 1;
  void clear_value() ;
  ::frame::proto::PixelElementSize_Enum value() const;
  void set_value(::frame::proto::PixelElementSize_Enum value);

  private:
  ::frame::proto::PixelElementSize_Enum _internal_value() const;
  void _internal_set_value(::frame::proto::PixelElementSize_Enum value);

  public:
  // @@protoc_insertion_point(class_scope:frame.proto.PixelElementSize)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    int value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pixel_2eproto;
};// -------------------------------------------------------------------

class PixelDepthComponent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frame.proto.PixelDepthComponent) */ {
 public:
  inline PixelDepthComponent() : PixelDepthComponent(nullptr) {}
  ~PixelDepthComponent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PixelDepthComponent(::google::protobuf::internal::ConstantInitialized);

  inline PixelDepthComponent(const PixelDepthComponent& from)
      : PixelDepthComponent(nullptr, from) {}
  PixelDepthComponent(PixelDepthComponent&& from) noexcept
    : PixelDepthComponent() {
    *this = ::std::move(from);
  }

  inline PixelDepthComponent& operator=(const PixelDepthComponent& from) {
    CopyFrom(from);
    return *this;
  }
  inline PixelDepthComponent& operator=(PixelDepthComponent&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PixelDepthComponent& default_instance() {
    return *internal_default_instance();
  }
  static inline const PixelDepthComponent* internal_default_instance() {
    return reinterpret_cast<const PixelDepthComponent*>(
               &_PixelDepthComponent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PixelDepthComponent& a, PixelDepthComponent& b) {
    a.Swap(&b);
  }
  inline void Swap(PixelDepthComponent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PixelDepthComponent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PixelDepthComponent* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PixelDepthComponent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PixelDepthComponent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PixelDepthComponent& from) {
    PixelDepthComponent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PixelDepthComponent* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "frame.proto.PixelDepthComponent";
  }
  protected:
  explicit PixelDepthComponent(::google::protobuf::Arena* arena);
  PixelDepthComponent(::google::protobuf::Arena* arena, const PixelDepthComponent& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Enum = PixelDepthComponent_Enum;
  static constexpr Enum INVALID = PixelDepthComponent_Enum_INVALID;
  static constexpr Enum DEPTH_COMPONENT8 = PixelDepthComponent_Enum_DEPTH_COMPONENT8;
  static constexpr Enum DEPTH_COMPONENT16 = PixelDepthComponent_Enum_DEPTH_COMPONENT16;
  static constexpr Enum DEPTH_COMPONENT24 = PixelDepthComponent_Enum_DEPTH_COMPONENT24;
  static constexpr Enum DEPTH_COMPONENT32 = PixelDepthComponent_Enum_DEPTH_COMPONENT32;
  static inline bool Enum_IsValid(int value) {
    return PixelDepthComponent_Enum_IsValid(value);
  }
  static constexpr Enum Enum_MIN = PixelDepthComponent_Enum_Enum_MIN;
  static constexpr Enum Enum_MAX = PixelDepthComponent_Enum_Enum_MAX;
  static constexpr int Enum_ARRAYSIZE = PixelDepthComponent_Enum_Enum_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Enum_descriptor() {
    return PixelDepthComponent_Enum_descriptor();
  }
  template <typename T>
  static inline const std::string& Enum_Name(T value) {
    return PixelDepthComponent_Enum_Name(value);
  }
  static inline bool Enum_Parse(absl::string_view name, Enum* value) {
    return PixelDepthComponent_Enum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .frame.proto.PixelDepthComponent.Enum value = 1;
  void clear_value() ;
  ::frame::proto::PixelDepthComponent_Enum value() const;
  void set_value(::frame::proto::PixelDepthComponent_Enum value);

  private:
  ::frame::proto::PixelDepthComponent_Enum _internal_value() const;
  void _internal_set_value(::frame::proto::PixelDepthComponent_Enum value);

  public:
  // @@protoc_insertion_point(class_scope:frame.proto.PixelDepthComponent)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    int value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pixel_2eproto;
};// -------------------------------------------------------------------

class CleanBuffer final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frame.proto.CleanBuffer) */ {
 public:
  inline CleanBuffer() : CleanBuffer(nullptr) {}
  ~CleanBuffer() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CleanBuffer(::google::protobuf::internal::ConstantInitialized);

  inline CleanBuffer(const CleanBuffer& from)
      : CleanBuffer(nullptr, from) {}
  CleanBuffer(CleanBuffer&& from) noexcept
    : CleanBuffer() {
    *this = ::std::move(from);
  }

  inline CleanBuffer& operator=(const CleanBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CleanBuffer& operator=(CleanBuffer&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CleanBuffer& default_instance() {
    return *internal_default_instance();
  }
  static inline const CleanBuffer* internal_default_instance() {
    return reinterpret_cast<const CleanBuffer*>(
               &_CleanBuffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CleanBuffer& a, CleanBuffer& b) {
    a.Swap(&b);
  }
  inline void Swap(CleanBuffer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CleanBuffer* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CleanBuffer* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CleanBuffer>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CleanBuffer& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CleanBuffer& from) {
    CleanBuffer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CleanBuffer* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "frame.proto.CleanBuffer";
  }
  protected:
  explicit CleanBuffer(::google::protobuf::Arena* arena);
  CleanBuffer(::google::protobuf::Arena* arena, const CleanBuffer& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Enum = CleanBuffer_Enum;
  static constexpr Enum INVALID = CleanBuffer_Enum_INVALID;
  static constexpr Enum CLEAR_COLOR = CleanBuffer_Enum_CLEAR_COLOR;
  static constexpr Enum CLEAR_DEPTH = CleanBuffer_Enum_CLEAR_DEPTH;
  static inline bool Enum_IsValid(int value) {
    return CleanBuffer_Enum_IsValid(value);
  }
  static constexpr Enum Enum_MIN = CleanBuffer_Enum_Enum_MIN;
  static constexpr Enum Enum_MAX = CleanBuffer_Enum_Enum_MAX;
  static constexpr int Enum_ARRAYSIZE = CleanBuffer_Enum_Enum_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Enum_descriptor() {
    return CleanBuffer_Enum_descriptor();
  }
  template <typename T>
  static inline const std::string& Enum_Name(T value) {
    return CleanBuffer_Enum_Name(value);
  }
  static inline bool Enum_Parse(absl::string_view name, Enum* value) {
    return CleanBuffer_Enum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .frame.proto.CleanBuffer.Enum values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  public:
  ::frame::proto::CleanBuffer_Enum values(int index) const;
  void set_values(int index, ::frame::proto::CleanBuffer_Enum value);
  void add_values(::frame::proto::CleanBuffer_Enum value);
  const ::google::protobuf::RepeatedField<int>& values() const;
  ::google::protobuf::RepeatedField<int>* mutable_values();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_values() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_values();

  public:
  // @@protoc_insertion_point(class_scope:frame.proto.CleanBuffer)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<int> values_;
    mutable ::google::protobuf::internal::CachedSize _values_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pixel_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CleanBuffer

// repeated .frame.proto.CleanBuffer.Enum values = 1;
inline int CleanBuffer::_internal_values_size() const {
  return _internal_values().size();
}
inline int CleanBuffer::values_size() const {
  return _internal_values_size();
}
inline void CleanBuffer::clear_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.values_.Clear();
}
inline ::frame::proto::CleanBuffer_Enum CleanBuffer::values(int index) const {
  // @@protoc_insertion_point(field_get:frame.proto.CleanBuffer.values)
  return static_cast<::frame::proto::CleanBuffer_Enum>(_internal_values().Get(index));
}
inline void CleanBuffer::set_values(int index, ::frame::proto::CleanBuffer_Enum value) {
  _internal_mutable_values()->Set(index, value);
  // @@protoc_insertion_point(field_set:frame.proto.CleanBuffer.values)
}
inline void CleanBuffer::add_values(::frame::proto::CleanBuffer_Enum value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add(value);
  // @@protoc_insertion_point(field_add:frame.proto.CleanBuffer.values)
}
inline const ::google::protobuf::RepeatedField<int>& CleanBuffer::values() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:frame.proto.CleanBuffer.values)
  return _internal_values();
}
inline ::google::protobuf::RepeatedField<int>* CleanBuffer::mutable_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:frame.proto.CleanBuffer.values)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_values();
}
inline const ::google::protobuf::RepeatedField<int>& CleanBuffer::_internal_values() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedField<int>* CleanBuffer::_internal_mutable_values() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// PixelElementSize

// .frame.proto.PixelElementSize.Enum value = 1;
inline void PixelElementSize::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_ = 0;
}
inline ::frame::proto::PixelElementSize_Enum PixelElementSize::value() const {
  // @@protoc_insertion_point(field_get:frame.proto.PixelElementSize.value)
  return _internal_value();
}
inline void PixelElementSize::set_value(::frame::proto::PixelElementSize_Enum value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:frame.proto.PixelElementSize.value)
}
inline ::frame::proto::PixelElementSize_Enum PixelElementSize::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::frame::proto::PixelElementSize_Enum>(_impl_.value_);
}
inline void PixelElementSize::_internal_set_value(::frame::proto::PixelElementSize_Enum value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// PixelStructure

// .frame.proto.PixelStructure.Enum value = 1;
inline void PixelStructure::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_ = 0;
}
inline ::frame::proto::PixelStructure_Enum PixelStructure::value() const {
  // @@protoc_insertion_point(field_get:frame.proto.PixelStructure.value)
  return _internal_value();
}
inline void PixelStructure::set_value(::frame::proto::PixelStructure_Enum value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:frame.proto.PixelStructure.value)
}
inline ::frame::proto::PixelStructure_Enum PixelStructure::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::frame::proto::PixelStructure_Enum>(_impl_.value_);
}
inline void PixelStructure::_internal_set_value(::frame::proto::PixelStructure_Enum value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// PixelDepthComponent

// .frame.proto.PixelDepthComponent.Enum value = 1;
inline void PixelDepthComponent::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_ = 0;
}
inline ::frame::proto::PixelDepthComponent_Enum PixelDepthComponent::value() const {
  // @@protoc_insertion_point(field_get:frame.proto.PixelDepthComponent.value)
  return _internal_value();
}
inline void PixelDepthComponent::set_value(::frame::proto::PixelDepthComponent_Enum value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:frame.proto.PixelDepthComponent.value)
}
inline ::frame::proto::PixelDepthComponent_Enum PixelDepthComponent::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::frame::proto::PixelDepthComponent_Enum>(_impl_.value_);
}
inline void PixelDepthComponent::_internal_set_value(::frame::proto::PixelDepthComponent_Enum value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace frame


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::frame::proto::CleanBuffer_Enum> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::frame::proto::CleanBuffer_Enum>() {
  return ::frame::proto::CleanBuffer_Enum_descriptor();
}
template <>
struct is_proto_enum<::frame::proto::PixelElementSize_Enum> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::frame::proto::PixelElementSize_Enum>() {
  return ::frame::proto::PixelElementSize_Enum_descriptor();
}
template <>
struct is_proto_enum<::frame::proto::PixelStructure_Enum> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::frame::proto::PixelStructure_Enum>() {
  return ::frame::proto::PixelStructure_Enum_descriptor();
}
template <>
struct is_proto_enum<::frame::proto::PixelDepthComponent_Enum> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::frame::proto::PixelDepthComponent_Enum>() {
  return ::frame::proto::PixelDepthComponent_Enum_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_pixel_2eproto_2epb_2eh
