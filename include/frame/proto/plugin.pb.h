// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: plugin.proto
// Protobuf C++ Version: 5.29.3

#ifndef plugin_2eproto_2epb_2eh
#define plugin_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_plugin_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_plugin_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_plugin_2eproto;
namespace frame {
namespace proto {
class MultiPlugin;
struct MultiPluginDefaultTypeInternal;
extern MultiPluginDefaultTypeInternal _MultiPlugin_default_instance_;
class Plugin;
struct PluginDefaultTypeInternal;
extern PluginDefaultTypeInternal _Plugin_default_instance_;
}  // namespace proto
}  // namespace frame
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace frame {
namespace proto {
enum Plugin_PluginEnum : int {
  Plugin_PluginEnum_NONE = 0,
  Plugin_PluginEnum_ALL = 1,
  Plugin_PluginEnum_POINT_RANGE = 2,
  Plugin_PluginEnum_NORMAL = 3,
  Plugin_PluginEnum_Plugin_PluginEnum_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Plugin_PluginEnum_Plugin_PluginEnum_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Plugin_PluginEnum_IsValid(int value);
extern const uint32_t Plugin_PluginEnum_internal_data_[];
constexpr Plugin_PluginEnum Plugin_PluginEnum_PluginEnum_MIN = static_cast<Plugin_PluginEnum>(0);
constexpr Plugin_PluginEnum Plugin_PluginEnum_PluginEnum_MAX = static_cast<Plugin_PluginEnum>(3);
constexpr int Plugin_PluginEnum_PluginEnum_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
Plugin_PluginEnum_descriptor();
template <typename T>
const std::string& Plugin_PluginEnum_Name(T value) {
  static_assert(std::is_same<T, Plugin_PluginEnum>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PluginEnum_Name().");
  return Plugin_PluginEnum_Name(static_cast<Plugin_PluginEnum>(value));
}
template <>
inline const std::string& Plugin_PluginEnum_Name(Plugin_PluginEnum value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Plugin_PluginEnum_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool Plugin_PluginEnum_Parse(absl::string_view name, Plugin_PluginEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Plugin_PluginEnum>(
      Plugin_PluginEnum_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Plugin final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:frame.proto.Plugin) */ {
 public:
  inline Plugin() : Plugin(nullptr) {}
  ~Plugin() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Plugin* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Plugin));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Plugin(
      ::google::protobuf::internal::ConstantInitialized);

  inline Plugin(const Plugin& from) : Plugin(nullptr, from) {}
  inline Plugin(Plugin&& from) noexcept
      : Plugin(nullptr, std::move(from)) {}
  inline Plugin& operator=(const Plugin& from) {
    CopyFrom(from);
    return *this;
  }
  inline Plugin& operator=(Plugin&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Plugin& default_instance() {
    return *internal_default_instance();
  }
  static inline const Plugin* internal_default_instance() {
    return reinterpret_cast<const Plugin*>(
        &_Plugin_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Plugin& a, Plugin& b) { a.Swap(&b); }
  inline void Swap(Plugin* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Plugin* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Plugin* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Plugin>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Plugin& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Plugin& from) { Plugin::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Plugin* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "frame.proto.Plugin"; }

 protected:
  explicit Plugin(::google::protobuf::Arena* arena);
  Plugin(::google::protobuf::Arena* arena, const Plugin& from);
  Plugin(::google::protobuf::Arena* arena, Plugin&& from) noexcept
      : Plugin(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using PluginEnum = Plugin_PluginEnum;
  static constexpr PluginEnum NONE = Plugin_PluginEnum_NONE;
  static constexpr PluginEnum ALL = Plugin_PluginEnum_ALL;
  static constexpr PluginEnum POINT_RANGE = Plugin_PluginEnum_POINT_RANGE;
  static constexpr PluginEnum NORMAL = Plugin_PluginEnum_NORMAL;
  static inline bool PluginEnum_IsValid(int value) {
    return Plugin_PluginEnum_IsValid(value);
  }
  static constexpr PluginEnum PluginEnum_MIN = Plugin_PluginEnum_PluginEnum_MIN;
  static constexpr PluginEnum PluginEnum_MAX = Plugin_PluginEnum_PluginEnum_MAX;
  static constexpr int PluginEnum_ARRAYSIZE = Plugin_PluginEnum_PluginEnum_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PluginEnum_descriptor() {
    return Plugin_PluginEnum_descriptor();
  }
  template <typename T>
  static inline const std::string& PluginEnum_Name(T value) {
    return Plugin_PluginEnum_Name(value);
  }
  static inline bool PluginEnum_Parse(absl::string_view name, PluginEnum* value) {
    return Plugin_PluginEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kBaseFieldNumber = 3,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string base = 3;
  void clear_base() ;
  const std::string& base() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_base(Arg_&& arg, Args_... args);
  std::string* mutable_base();
  PROTOBUF_NODISCARD std::string* release_base();
  void set_allocated_base(std::string* value);

  private:
  const std::string& _internal_base() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_base(
      const std::string& value);
  std::string* _internal_mutable_base();

  public:
  // .frame.proto.Plugin.PluginEnum value = 2;
  void clear_value() ;
  ::frame::proto::Plugin_PluginEnum value() const;
  void set_value(::frame::proto::Plugin_PluginEnum value);

  private:
  ::frame::proto::Plugin_PluginEnum _internal_value() const;
  void _internal_set_value(::frame::proto::Plugin_PluginEnum value);

  public:
  // @@protoc_insertion_point(class_scope:frame.proto.Plugin)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      35, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Plugin& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr base_;
    int value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_plugin_2eproto;
};
// -------------------------------------------------------------------

class MultiPlugin final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:frame.proto.MultiPlugin) */ {
 public:
  inline MultiPlugin() : MultiPlugin(nullptr) {}
  ~MultiPlugin() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MultiPlugin* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MultiPlugin));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MultiPlugin(
      ::google::protobuf::internal::ConstantInitialized);

  inline MultiPlugin(const MultiPlugin& from) : MultiPlugin(nullptr, from) {}
  inline MultiPlugin(MultiPlugin&& from) noexcept
      : MultiPlugin(nullptr, std::move(from)) {}
  inline MultiPlugin& operator=(const MultiPlugin& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiPlugin& operator=(MultiPlugin&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiPlugin& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiPlugin* internal_default_instance() {
    return reinterpret_cast<const MultiPlugin*>(
        &_MultiPlugin_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(MultiPlugin& a, MultiPlugin& b) { a.Swap(&b); }
  inline void Swap(MultiPlugin* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiPlugin* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiPlugin* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MultiPlugin>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MultiPlugin& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MultiPlugin& from) { MultiPlugin::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MultiPlugin* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "frame.proto.MultiPlugin"; }

 protected:
  explicit MultiPlugin(::google::protobuf::Arena* arena);
  MultiPlugin(::google::protobuf::Arena* arena, const MultiPlugin& from);
  MultiPlugin(::google::protobuf::Arena* arena, MultiPlugin&& from) noexcept
      : MultiPlugin(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPluginsFieldNumber = 1,
  };
  // repeated .frame.proto.Plugin plugins = 1;
  int plugins_size() const;
  private:
  int _internal_plugins_size() const;

  public:
  void clear_plugins() ;
  ::frame::proto::Plugin* mutable_plugins(int index);
  ::google::protobuf::RepeatedPtrField<::frame::proto::Plugin>* mutable_plugins();

  private:
  const ::google::protobuf::RepeatedPtrField<::frame::proto::Plugin>& _internal_plugins() const;
  ::google::protobuf::RepeatedPtrField<::frame::proto::Plugin>* _internal_mutable_plugins();
  public:
  const ::frame::proto::Plugin& plugins(int index) const;
  ::frame::proto::Plugin* add_plugins();
  const ::google::protobuf::RepeatedPtrField<::frame::proto::Plugin>& plugins() const;
  // @@protoc_insertion_point(class_scope:frame.proto.MultiPlugin)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MultiPlugin& from_msg);
    ::google::protobuf::RepeatedPtrField< ::frame::proto::Plugin > plugins_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_plugin_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Plugin

// string name = 1;
inline void Plugin::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Plugin::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Plugin.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Plugin::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:frame.proto.Plugin.name)
}
inline std::string* Plugin::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:frame.proto.Plugin.name)
  return _s;
}
inline const std::string& Plugin::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Plugin::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Plugin::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Plugin::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:frame.proto.Plugin.name)
  return _impl_.name_.Release();
}
inline void Plugin::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Plugin.name)
}

// string base = 3;
inline void Plugin::clear_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_.ClearToEmpty();
}
inline const std::string& Plugin::base() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Plugin.base)
  return _internal_base();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Plugin::set_base(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:frame.proto.Plugin.base)
}
inline std::string* Plugin::mutable_base() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:frame.proto.Plugin.base)
  return _s;
}
inline const std::string& Plugin::_internal_base() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.base_.Get();
}
inline void Plugin::_internal_set_base(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_.Set(value, GetArena());
}
inline std::string* Plugin::_internal_mutable_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.base_.Mutable( GetArena());
}
inline std::string* Plugin::release_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:frame.proto.Plugin.base)
  return _impl_.base_.Release();
}
inline void Plugin::set_allocated_base(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.base_.IsDefault()) {
    _impl_.base_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Plugin.base)
}

// .frame.proto.Plugin.PluginEnum value = 2;
inline void Plugin::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = 0;
}
inline ::frame::proto::Plugin_PluginEnum Plugin::value() const {
  // @@protoc_insertion_point(field_get:frame.proto.Plugin.value)
  return _internal_value();
}
inline void Plugin::set_value(::frame::proto::Plugin_PluginEnum value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:frame.proto.Plugin.value)
}
inline ::frame::proto::Plugin_PluginEnum Plugin::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::frame::proto::Plugin_PluginEnum>(_impl_.value_);
}
inline void Plugin::_internal_set_value(::frame::proto::Plugin_PluginEnum value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// MultiPlugin

// repeated .frame.proto.Plugin plugins = 1;
inline int MultiPlugin::_internal_plugins_size() const {
  return _internal_plugins().size();
}
inline int MultiPlugin::plugins_size() const {
  return _internal_plugins_size();
}
inline void MultiPlugin::clear_plugins() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.plugins_.Clear();
}
inline ::frame::proto::Plugin* MultiPlugin::mutable_plugins(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:frame.proto.MultiPlugin.plugins)
  return _internal_mutable_plugins()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::frame::proto::Plugin>* MultiPlugin::mutable_plugins()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:frame.proto.MultiPlugin.plugins)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_plugins();
}
inline const ::frame::proto::Plugin& MultiPlugin::plugins(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.MultiPlugin.plugins)
  return _internal_plugins().Get(index);
}
inline ::frame::proto::Plugin* MultiPlugin::add_plugins() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::frame::proto::Plugin* _add = _internal_mutable_plugins()->Add();
  // @@protoc_insertion_point(field_add:frame.proto.MultiPlugin.plugins)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::frame::proto::Plugin>& MultiPlugin::plugins() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:frame.proto.MultiPlugin.plugins)
  return _internal_plugins();
}
inline const ::google::protobuf::RepeatedPtrField<::frame::proto::Plugin>&
MultiPlugin::_internal_plugins() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.plugins_;
}
inline ::google::protobuf::RepeatedPtrField<::frame::proto::Plugin>*
MultiPlugin::_internal_mutable_plugins() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.plugins_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace frame


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::frame::proto::Plugin_PluginEnum> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::frame::proto::Plugin_PluginEnum>() {
  return ::frame::proto::Plugin_PluginEnum_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // plugin_2eproto_2epb_2eh
