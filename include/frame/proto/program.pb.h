// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: program.proto
// Protobuf C++ Version: 5.29.3

#ifndef program_2eproto_2epb_2eh
#define program_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "uniform.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_program_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_program_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_program_2eproto;
namespace frame {
namespace proto {
class Program;
struct ProgramDefaultTypeInternal;
extern ProgramDefaultTypeInternal _Program_default_instance_;
class SceneType;
struct SceneTypeDefaultTypeInternal;
extern SceneTypeDefaultTypeInternal _SceneType_default_instance_;
}  // namespace proto
}  // namespace frame
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace frame {
namespace proto {
enum SceneType_Enum : int {
  SceneType_Enum_NONE = 0,
  SceneType_Enum_QUAD = 1,
  SceneType_Enum_CUBE = 2,
  SceneType_Enum_SCENE = 3,
  SceneType_Enum_SceneType_Enum_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SceneType_Enum_SceneType_Enum_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SceneType_Enum_IsValid(int value);
extern const uint32_t SceneType_Enum_internal_data_[];
constexpr SceneType_Enum SceneType_Enum_Enum_MIN = static_cast<SceneType_Enum>(0);
constexpr SceneType_Enum SceneType_Enum_Enum_MAX = static_cast<SceneType_Enum>(3);
constexpr int SceneType_Enum_Enum_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
SceneType_Enum_descriptor();
template <typename T>
const std::string& SceneType_Enum_Name(T value) {
  static_assert(std::is_same<T, SceneType_Enum>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Enum_Name().");
  return SceneType_Enum_Name(static_cast<SceneType_Enum>(value));
}
template <>
inline const std::string& SceneType_Enum_Name(SceneType_Enum value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SceneType_Enum_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool SceneType_Enum_Parse(absl::string_view name, SceneType_Enum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SceneType_Enum>(
      SceneType_Enum_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SceneType final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:frame.proto.SceneType) */ {
 public:
  inline SceneType() : SceneType(nullptr) {}
  ~SceneType() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SceneType* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SceneType));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SceneType(
      ::google::protobuf::internal::ConstantInitialized);

  inline SceneType(const SceneType& from) : SceneType(nullptr, from) {}
  inline SceneType(SceneType&& from) noexcept
      : SceneType(nullptr, std::move(from)) {}
  inline SceneType& operator=(const SceneType& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneType& operator=(SceneType&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneType& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneType* internal_default_instance() {
    return reinterpret_cast<const SceneType*>(
        &_SceneType_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SceneType& a, SceneType& b) { a.Swap(&b); }
  inline void Swap(SceneType* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneType* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneType* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SceneType>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SceneType& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SceneType& from) { SceneType::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SceneType* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "frame.proto.SceneType"; }

 protected:
  explicit SceneType(::google::protobuf::Arena* arena);
  SceneType(::google::protobuf::Arena* arena, const SceneType& from);
  SceneType(::google::protobuf::Arena* arena, SceneType&& from) noexcept
      : SceneType(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Enum = SceneType_Enum;
  static constexpr Enum NONE = SceneType_Enum_NONE;
  static constexpr Enum QUAD = SceneType_Enum_QUAD;
  static constexpr Enum CUBE = SceneType_Enum_CUBE;
  static constexpr Enum SCENE = SceneType_Enum_SCENE;
  static inline bool Enum_IsValid(int value) {
    return SceneType_Enum_IsValid(value);
  }
  static constexpr Enum Enum_MIN = SceneType_Enum_Enum_MIN;
  static constexpr Enum Enum_MAX = SceneType_Enum_Enum_MAX;
  static constexpr int Enum_ARRAYSIZE = SceneType_Enum_Enum_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Enum_descriptor() {
    return SceneType_Enum_descriptor();
  }
  template <typename T>
  static inline const std::string& Enum_Name(T value) {
    return SceneType_Enum_Name(value);
  }
  static inline bool Enum_Parse(absl::string_view name, Enum* value) {
    return SceneType_Enum_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kValueFieldNumber = 1,
  };
  // .frame.proto.SceneType.Enum value = 1;
  void clear_value() ;
  ::frame::proto::SceneType_Enum value() const;
  void set_value(::frame::proto::SceneType_Enum value);

  private:
  ::frame::proto::SceneType_Enum _internal_value() const;
  void _internal_set_value(::frame::proto::SceneType_Enum value);

  public:
  // @@protoc_insertion_point(class_scope:frame.proto.SceneType)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SceneType& from_msg);
    int value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_program_2eproto;
};
// -------------------------------------------------------------------

class Program final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:frame.proto.Program) */ {
 public:
  inline Program() : Program(nullptr) {}
  ~Program() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Program* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Program));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Program(
      ::google::protobuf::internal::ConstantInitialized);

  inline Program(const Program& from) : Program(nullptr, from) {}
  inline Program(Program&& from) noexcept
      : Program(nullptr, std::move(from)) {}
  inline Program& operator=(const Program& from) {
    CopyFrom(from);
    return *this;
  }
  inline Program& operator=(Program&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Program& default_instance() {
    return *internal_default_instance();
  }
  static inline const Program* internal_default_instance() {
    return reinterpret_cast<const Program*>(
        &_Program_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Program& a, Program& b) { a.Swap(&b); }
  inline void Swap(Program* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Program* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Program* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Program>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Program& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Program& from) { Program::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Program* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "frame.proto.Program"; }

 protected:
  explicit Program(::google::protobuf::Arena* arena);
  Program(::google::protobuf::Arena* arena, const Program& from);
  Program(::google::protobuf::Arena* arena, Program&& from) noexcept
      : Program(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInputTextureNamesFieldNumber = 3,
    kOutputTextureNamesFieldNumber = 4,
    kParametersFieldNumber = 7,
    kNameFieldNumber = 1,
    kInputSceneRootNameFieldNumber = 5,
    kShaderFieldNumber = 6,
    kInputSceneTypeFieldNumber = 9,
  };
  // repeated string input_texture_names = 3;
  int input_texture_names_size() const;
  private:
  int _internal_input_texture_names_size() const;

  public:
  void clear_input_texture_names() ;
  const std::string& input_texture_names(int index) const;
  std::string* mutable_input_texture_names(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_input_texture_names(int index, Arg_&& value, Args_... args);
  std::string* add_input_texture_names();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_input_texture_names(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& input_texture_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_input_texture_names();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_input_texture_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_input_texture_names();

  public:
  // repeated string output_texture_names = 4;
  int output_texture_names_size() const;
  private:
  int _internal_output_texture_names_size() const;

  public:
  void clear_output_texture_names() ;
  const std::string& output_texture_names(int index) const;
  std::string* mutable_output_texture_names(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_output_texture_names(int index, Arg_&& value, Args_... args);
  std::string* add_output_texture_names();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_output_texture_names(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& output_texture_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_output_texture_names();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_output_texture_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_output_texture_names();

  public:
  // repeated .frame.proto.Uniform parameters = 7;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;

  public:
  void clear_parameters() ;
  ::frame::proto::Uniform* mutable_parameters(int index);
  ::google::protobuf::RepeatedPtrField<::frame::proto::Uniform>* mutable_parameters();

  private:
  const ::google::protobuf::RepeatedPtrField<::frame::proto::Uniform>& _internal_parameters() const;
  ::google::protobuf::RepeatedPtrField<::frame::proto::Uniform>* _internal_mutable_parameters();
  public:
  const ::frame::proto::Uniform& parameters(int index) const;
  ::frame::proto::Uniform* add_parameters();
  const ::google::protobuf::RepeatedPtrField<::frame::proto::Uniform>& parameters() const;
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string input_scene_root_name = 5;
  void clear_input_scene_root_name() ;
  const std::string& input_scene_root_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_input_scene_root_name(Arg_&& arg, Args_... args);
  std::string* mutable_input_scene_root_name();
  PROTOBUF_NODISCARD std::string* release_input_scene_root_name();
  void set_allocated_input_scene_root_name(std::string* value);

  private:
  const std::string& _internal_input_scene_root_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_scene_root_name(
      const std::string& value);
  std::string* _internal_mutable_input_scene_root_name();

  public:
  // string shader = 6;
  void clear_shader() ;
  const std::string& shader() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_shader(Arg_&& arg, Args_... args);
  std::string* mutable_shader();
  PROTOBUF_NODISCARD std::string* release_shader();
  void set_allocated_shader(std::string* value);

  private:
  const std::string& _internal_shader() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shader(
      const std::string& value);
  std::string* _internal_mutable_shader();

  public:
  // .frame.proto.SceneType input_scene_type = 9;
  bool has_input_scene_type() const;
  void clear_input_scene_type() ;
  const ::frame::proto::SceneType& input_scene_type() const;
  PROTOBUF_NODISCARD ::frame::proto::SceneType* release_input_scene_type();
  ::frame::proto::SceneType* mutable_input_scene_type();
  void set_allocated_input_scene_type(::frame::proto::SceneType* value);
  void unsafe_arena_set_allocated_input_scene_type(::frame::proto::SceneType* value);
  ::frame::proto::SceneType* unsafe_arena_release_input_scene_type();

  private:
  const ::frame::proto::SceneType& _internal_input_scene_type() const;
  ::frame::proto::SceneType* _internal_mutable_input_scene_type();

  public:
  // @@protoc_insertion_point(class_scope:frame.proto.Program)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 2,
      98, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Program& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> input_texture_names_;
    ::google::protobuf::RepeatedPtrField<std::string> output_texture_names_;
    ::google::protobuf::RepeatedPtrField< ::frame::proto::Uniform > parameters_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr input_scene_root_name_;
    ::google::protobuf::internal::ArenaStringPtr shader_;
    ::frame::proto::SceneType* input_scene_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_program_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SceneType

// .frame.proto.SceneType.Enum value = 1;
inline void SceneType::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = 0;
}
inline ::frame::proto::SceneType_Enum SceneType::value() const {
  // @@protoc_insertion_point(field_get:frame.proto.SceneType.value)
  return _internal_value();
}
inline void SceneType::set_value(::frame::proto::SceneType_Enum value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:frame.proto.SceneType.value)
}
inline ::frame::proto::SceneType_Enum SceneType::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::frame::proto::SceneType_Enum>(_impl_.value_);
}
inline void SceneType::_internal_set_value(::frame::proto::SceneType_Enum value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// Program

// string name = 1;
inline void Program::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Program::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Program.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Program::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:frame.proto.Program.name)
}
inline std::string* Program::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:frame.proto.Program.name)
  return _s;
}
inline const std::string& Program::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Program::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Program::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Program::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:frame.proto.Program.name)
  return _impl_.name_.Release();
}
inline void Program::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Program.name)
}

// repeated string input_texture_names = 3;
inline int Program::_internal_input_texture_names_size() const {
  return _internal_input_texture_names().size();
}
inline int Program::input_texture_names_size() const {
  return _internal_input_texture_names_size();
}
inline void Program::clear_input_texture_names() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.input_texture_names_.Clear();
}
inline std::string* Program::add_input_texture_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_input_texture_names()->Add();
  // @@protoc_insertion_point(field_add_mutable:frame.proto.Program.input_texture_names)
  return _s;
}
inline const std::string& Program::input_texture_names(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Program.input_texture_names)
  return _internal_input_texture_names().Get(index);
}
inline std::string* Program::mutable_input_texture_names(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:frame.proto.Program.input_texture_names)
  return _internal_mutable_input_texture_names()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void Program::set_input_texture_names(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_input_texture_names()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:frame.proto.Program.input_texture_names)
}
template <typename Arg_, typename... Args_>
inline void Program::add_input_texture_names(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_input_texture_names(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:frame.proto.Program.input_texture_names)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Program::input_texture_names() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:frame.proto.Program.input_texture_names)
  return _internal_input_texture_names();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Program::mutable_input_texture_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:frame.proto.Program.input_texture_names)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_input_texture_names();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Program::_internal_input_texture_names() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.input_texture_names_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Program::_internal_mutable_input_texture_names() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.input_texture_names_;
}

// repeated string output_texture_names = 4;
inline int Program::_internal_output_texture_names_size() const {
  return _internal_output_texture_names().size();
}
inline int Program::output_texture_names_size() const {
  return _internal_output_texture_names_size();
}
inline void Program::clear_output_texture_names() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.output_texture_names_.Clear();
}
inline std::string* Program::add_output_texture_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_output_texture_names()->Add();
  // @@protoc_insertion_point(field_add_mutable:frame.proto.Program.output_texture_names)
  return _s;
}
inline const std::string& Program::output_texture_names(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Program.output_texture_names)
  return _internal_output_texture_names().Get(index);
}
inline std::string* Program::mutable_output_texture_names(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:frame.proto.Program.output_texture_names)
  return _internal_mutable_output_texture_names()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void Program::set_output_texture_names(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_output_texture_names()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:frame.proto.Program.output_texture_names)
}
template <typename Arg_, typename... Args_>
inline void Program::add_output_texture_names(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_output_texture_names(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:frame.proto.Program.output_texture_names)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Program::output_texture_names() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:frame.proto.Program.output_texture_names)
  return _internal_output_texture_names();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Program::mutable_output_texture_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:frame.proto.Program.output_texture_names)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_output_texture_names();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Program::_internal_output_texture_names() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.output_texture_names_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Program::_internal_mutable_output_texture_names() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.output_texture_names_;
}

// .frame.proto.SceneType input_scene_type = 9;
inline bool Program::has_input_scene_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.input_scene_type_ != nullptr);
  return value;
}
inline void Program::clear_input_scene_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.input_scene_type_ != nullptr) _impl_.input_scene_type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::frame::proto::SceneType& Program::_internal_input_scene_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::frame::proto::SceneType* p = _impl_.input_scene_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::frame::proto::SceneType&>(::frame::proto::_SceneType_default_instance_);
}
inline const ::frame::proto::SceneType& Program::input_scene_type() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Program.input_scene_type)
  return _internal_input_scene_type();
}
inline void Program::unsafe_arena_set_allocated_input_scene_type(::frame::proto::SceneType* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.input_scene_type_);
  }
  _impl_.input_scene_type_ = reinterpret_cast<::frame::proto::SceneType*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Program.input_scene_type)
}
inline ::frame::proto::SceneType* Program::release_input_scene_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::frame::proto::SceneType* released = _impl_.input_scene_type_;
  _impl_.input_scene_type_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::frame::proto::SceneType* Program::unsafe_arena_release_input_scene_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:frame.proto.Program.input_scene_type)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::frame::proto::SceneType* temp = _impl_.input_scene_type_;
  _impl_.input_scene_type_ = nullptr;
  return temp;
}
inline ::frame::proto::SceneType* Program::_internal_mutable_input_scene_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.input_scene_type_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::frame::proto::SceneType>(GetArena());
    _impl_.input_scene_type_ = reinterpret_cast<::frame::proto::SceneType*>(p);
  }
  return _impl_.input_scene_type_;
}
inline ::frame::proto::SceneType* Program::mutable_input_scene_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::frame::proto::SceneType* _msg = _internal_mutable_input_scene_type();
  // @@protoc_insertion_point(field_mutable:frame.proto.Program.input_scene_type)
  return _msg;
}
inline void Program::set_allocated_input_scene_type(::frame::proto::SceneType* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.input_scene_type_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.input_scene_type_ = reinterpret_cast<::frame::proto::SceneType*>(value);
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Program.input_scene_type)
}

// string input_scene_root_name = 5;
inline void Program::clear_input_scene_root_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.input_scene_root_name_.ClearToEmpty();
}
inline const std::string& Program::input_scene_root_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Program.input_scene_root_name)
  return _internal_input_scene_root_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Program::set_input_scene_root_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.input_scene_root_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:frame.proto.Program.input_scene_root_name)
}
inline std::string* Program::mutable_input_scene_root_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_input_scene_root_name();
  // @@protoc_insertion_point(field_mutable:frame.proto.Program.input_scene_root_name)
  return _s;
}
inline const std::string& Program::_internal_input_scene_root_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.input_scene_root_name_.Get();
}
inline void Program::_internal_set_input_scene_root_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.input_scene_root_name_.Set(value, GetArena());
}
inline std::string* Program::_internal_mutable_input_scene_root_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.input_scene_root_name_.Mutable( GetArena());
}
inline std::string* Program::release_input_scene_root_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:frame.proto.Program.input_scene_root_name)
  return _impl_.input_scene_root_name_.Release();
}
inline void Program::set_allocated_input_scene_root_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.input_scene_root_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.input_scene_root_name_.IsDefault()) {
    _impl_.input_scene_root_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Program.input_scene_root_name)
}

// string shader = 6;
inline void Program::clear_shader() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shader_.ClearToEmpty();
}
inline const std::string& Program::shader() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Program.shader)
  return _internal_shader();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Program::set_shader(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shader_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:frame.proto.Program.shader)
}
inline std::string* Program::mutable_shader() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_shader();
  // @@protoc_insertion_point(field_mutable:frame.proto.Program.shader)
  return _s;
}
inline const std::string& Program::_internal_shader() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.shader_.Get();
}
inline void Program::_internal_set_shader(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shader_.Set(value, GetArena());
}
inline std::string* Program::_internal_mutable_shader() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.shader_.Mutable( GetArena());
}
inline std::string* Program::release_shader() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:frame.proto.Program.shader)
  return _impl_.shader_.Release();
}
inline void Program::set_allocated_shader(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shader_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.shader_.IsDefault()) {
    _impl_.shader_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Program.shader)
}

// repeated .frame.proto.Uniform parameters = 7;
inline int Program::_internal_parameters_size() const {
  return _internal_parameters().size();
}
inline int Program::parameters_size() const {
  return _internal_parameters_size();
}
inline ::frame::proto::Uniform* Program::mutable_parameters(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:frame.proto.Program.parameters)
  return _internal_mutable_parameters()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::frame::proto::Uniform>* Program::mutable_parameters()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:frame.proto.Program.parameters)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_parameters();
}
inline const ::frame::proto::Uniform& Program::parameters(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Program.parameters)
  return _internal_parameters().Get(index);
}
inline ::frame::proto::Uniform* Program::add_parameters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::frame::proto::Uniform* _add = _internal_mutable_parameters()->Add();
  // @@protoc_insertion_point(field_add:frame.proto.Program.parameters)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::frame::proto::Uniform>& Program::parameters() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:frame.proto.Program.parameters)
  return _internal_parameters();
}
inline const ::google::protobuf::RepeatedPtrField<::frame::proto::Uniform>&
Program::_internal_parameters() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.parameters_;
}
inline ::google::protobuf::RepeatedPtrField<::frame::proto::Uniform>*
Program::_internal_mutable_parameters() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.parameters_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace frame


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::frame::proto::SceneType_Enum> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::frame::proto::SceneType_Enum>() {
  return ::frame::proto::SceneType_Enum_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // program_2eproto_2epb_2eh
