// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: texture.proto
// Protobuf C++ Version: 5.29.3

#ifndef texture_2eproto_2epb_2eh
#define texture_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "size.pb.h"
#include "pixel.pb.h"
#include "plugin.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_texture_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_texture_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_texture_2eproto;
namespace frame {
namespace proto {
class CubeMapFiles;
struct CubeMapFilesDefaultTypeInternal;
extern CubeMapFilesDefaultTypeInternal _CubeMapFiles_default_instance_;
class Texture;
struct TextureDefaultTypeInternal;
extern TextureDefaultTypeInternal _Texture_default_instance_;
class TextureFilter;
struct TextureFilterDefaultTypeInternal;
extern TextureFilterDefaultTypeInternal _TextureFilter_default_instance_;
class TextureFrame;
struct TextureFrameDefaultTypeInternal;
extern TextureFrameDefaultTypeInternal _TextureFrame_default_instance_;
}  // namespace proto
}  // namespace frame
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace frame {
namespace proto {
enum TextureFilter_Enum : int {
  TextureFilter_Enum_INVALID = 0,
  TextureFilter_Enum_NEAREST = 1,
  TextureFilter_Enum_LINEAR = 2,
  TextureFilter_Enum_NEAREST_MIPMAP_NEAREST = 3,
  TextureFilter_Enum_LINEAR_MIPMAP_NEAREST = 4,
  TextureFilter_Enum_NEAREST_MIPMAP_LINEAR = 5,
  TextureFilter_Enum_LINEAR_MIPMAP_LINEAR = 6,
  TextureFilter_Enum_CLAMP_TO_EDGE = 7,
  TextureFilter_Enum_MIRRORED_REPEAT = 8,
  TextureFilter_Enum_REPEAT = 9,
  TextureFilter_Enum_CLAMP_TO_BORDER = 10,
  TextureFilter_Enum_TextureFilter_Enum_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TextureFilter_Enum_TextureFilter_Enum_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TextureFilter_Enum_IsValid(int value);
extern const uint32_t TextureFilter_Enum_internal_data_[];
constexpr TextureFilter_Enum TextureFilter_Enum_Enum_MIN = static_cast<TextureFilter_Enum>(0);
constexpr TextureFilter_Enum TextureFilter_Enum_Enum_MAX = static_cast<TextureFilter_Enum>(10);
constexpr int TextureFilter_Enum_Enum_ARRAYSIZE = 10 + 1;
const ::google::protobuf::EnumDescriptor*
TextureFilter_Enum_descriptor();
template <typename T>
const std::string& TextureFilter_Enum_Name(T value) {
  static_assert(std::is_same<T, TextureFilter_Enum>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Enum_Name().");
  return TextureFilter_Enum_Name(static_cast<TextureFilter_Enum>(value));
}
template <>
inline const std::string& TextureFilter_Enum_Name(TextureFilter_Enum value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TextureFilter_Enum_descriptor,
                                                 0, 10>(
      static_cast<int>(value));
}
inline bool TextureFilter_Enum_Parse(absl::string_view name, TextureFilter_Enum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TextureFilter_Enum>(
      TextureFilter_Enum_descriptor(), name, value);
}
enum TextureFrame_Enum : int {
  TextureFrame_Enum_INVALID = 0,
  TextureFrame_Enum_CUBE_MAP_POSITIVE_X = 1,
  TextureFrame_Enum_CUBE_MAP_NEGATIVE_X = 2,
  TextureFrame_Enum_CUBE_MAP_POSITIVE_Y = 3,
  TextureFrame_Enum_CUBE_MAP_NEGATIVE_Y = 4,
  TextureFrame_Enum_CUBE_MAP_POSITIVE_Z = 5,
  TextureFrame_Enum_CUBE_MAP_NEGATIVE_Z = 6,
  TextureFrame_Enum_TEXTURE_2D = 7,
  TextureFrame_Enum_TextureFrame_Enum_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TextureFrame_Enum_TextureFrame_Enum_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TextureFrame_Enum_IsValid(int value);
extern const uint32_t TextureFrame_Enum_internal_data_[];
constexpr TextureFrame_Enum TextureFrame_Enum_Enum_MIN = static_cast<TextureFrame_Enum>(0);
constexpr TextureFrame_Enum TextureFrame_Enum_Enum_MAX = static_cast<TextureFrame_Enum>(7);
constexpr int TextureFrame_Enum_Enum_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
TextureFrame_Enum_descriptor();
template <typename T>
const std::string& TextureFrame_Enum_Name(T value) {
  static_assert(std::is_same<T, TextureFrame_Enum>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Enum_Name().");
  return TextureFrame_Enum_Name(static_cast<TextureFrame_Enum>(value));
}
template <>
inline const std::string& TextureFrame_Enum_Name(TextureFrame_Enum value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TextureFrame_Enum_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool TextureFrame_Enum_Parse(absl::string_view name, TextureFrame_Enum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TextureFrame_Enum>(
      TextureFrame_Enum_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class TextureFrame final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:frame.proto.TextureFrame) */ {
 public:
  inline TextureFrame() : TextureFrame(nullptr) {}
  ~TextureFrame() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TextureFrame* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TextureFrame));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TextureFrame(
      ::google::protobuf::internal::ConstantInitialized);

  inline TextureFrame(const TextureFrame& from) : TextureFrame(nullptr, from) {}
  inline TextureFrame(TextureFrame&& from) noexcept
      : TextureFrame(nullptr, std::move(from)) {}
  inline TextureFrame& operator=(const TextureFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextureFrame& operator=(TextureFrame&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextureFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextureFrame* internal_default_instance() {
    return reinterpret_cast<const TextureFrame*>(
        &_TextureFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(TextureFrame& a, TextureFrame& b) { a.Swap(&b); }
  inline void Swap(TextureFrame* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextureFrame* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextureFrame* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TextureFrame>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TextureFrame& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TextureFrame& from) { TextureFrame::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TextureFrame* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "frame.proto.TextureFrame"; }

 protected:
  explicit TextureFrame(::google::protobuf::Arena* arena);
  TextureFrame(::google::protobuf::Arena* arena, const TextureFrame& from);
  TextureFrame(::google::protobuf::Arena* arena, TextureFrame&& from) noexcept
      : TextureFrame(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Enum = TextureFrame_Enum;
  static constexpr Enum INVALID = TextureFrame_Enum_INVALID;
  static constexpr Enum CUBE_MAP_POSITIVE_X = TextureFrame_Enum_CUBE_MAP_POSITIVE_X;
  static constexpr Enum CUBE_MAP_NEGATIVE_X = TextureFrame_Enum_CUBE_MAP_NEGATIVE_X;
  static constexpr Enum CUBE_MAP_POSITIVE_Y = TextureFrame_Enum_CUBE_MAP_POSITIVE_Y;
  static constexpr Enum CUBE_MAP_NEGATIVE_Y = TextureFrame_Enum_CUBE_MAP_NEGATIVE_Y;
  static constexpr Enum CUBE_MAP_POSITIVE_Z = TextureFrame_Enum_CUBE_MAP_POSITIVE_Z;
  static constexpr Enum CUBE_MAP_NEGATIVE_Z = TextureFrame_Enum_CUBE_MAP_NEGATIVE_Z;
  static constexpr Enum TEXTURE_2D = TextureFrame_Enum_TEXTURE_2D;
  static inline bool Enum_IsValid(int value) {
    return TextureFrame_Enum_IsValid(value);
  }
  static constexpr Enum Enum_MIN = TextureFrame_Enum_Enum_MIN;
  static constexpr Enum Enum_MAX = TextureFrame_Enum_Enum_MAX;
  static constexpr int Enum_ARRAYSIZE = TextureFrame_Enum_Enum_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Enum_descriptor() {
    return TextureFrame_Enum_descriptor();
  }
  template <typename T>
  static inline const std::string& Enum_Name(T value) {
    return TextureFrame_Enum_Name(value);
  }
  static inline bool Enum_Parse(absl::string_view name, Enum* value) {
    return TextureFrame_Enum_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kValueFieldNumber = 1,
  };
  // .frame.proto.TextureFrame.Enum value = 1;
  void clear_value() ;
  ::frame::proto::TextureFrame_Enum value() const;
  void set_value(::frame::proto::TextureFrame_Enum value);

  private:
  ::frame::proto::TextureFrame_Enum _internal_value() const;
  void _internal_set_value(::frame::proto::TextureFrame_Enum value);

  public:
  // @@protoc_insertion_point(class_scope:frame.proto.TextureFrame)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TextureFrame& from_msg);
    int value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_texture_2eproto;
};
// -------------------------------------------------------------------

class TextureFilter final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:frame.proto.TextureFilter) */ {
 public:
  inline TextureFilter() : TextureFilter(nullptr) {}
  ~TextureFilter() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TextureFilter* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TextureFilter));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TextureFilter(
      ::google::protobuf::internal::ConstantInitialized);

  inline TextureFilter(const TextureFilter& from) : TextureFilter(nullptr, from) {}
  inline TextureFilter(TextureFilter&& from) noexcept
      : TextureFilter(nullptr, std::move(from)) {}
  inline TextureFilter& operator=(const TextureFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextureFilter& operator=(TextureFilter&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextureFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextureFilter* internal_default_instance() {
    return reinterpret_cast<const TextureFilter*>(
        &_TextureFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(TextureFilter& a, TextureFilter& b) { a.Swap(&b); }
  inline void Swap(TextureFilter* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextureFilter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextureFilter* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TextureFilter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TextureFilter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TextureFilter& from) { TextureFilter::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TextureFilter* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "frame.proto.TextureFilter"; }

 protected:
  explicit TextureFilter(::google::protobuf::Arena* arena);
  TextureFilter(::google::protobuf::Arena* arena, const TextureFilter& from);
  TextureFilter(::google::protobuf::Arena* arena, TextureFilter&& from) noexcept
      : TextureFilter(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Enum = TextureFilter_Enum;
  static constexpr Enum INVALID = TextureFilter_Enum_INVALID;
  static constexpr Enum NEAREST = TextureFilter_Enum_NEAREST;
  static constexpr Enum LINEAR = TextureFilter_Enum_LINEAR;
  static constexpr Enum NEAREST_MIPMAP_NEAREST = TextureFilter_Enum_NEAREST_MIPMAP_NEAREST;
  static constexpr Enum LINEAR_MIPMAP_NEAREST = TextureFilter_Enum_LINEAR_MIPMAP_NEAREST;
  static constexpr Enum NEAREST_MIPMAP_LINEAR = TextureFilter_Enum_NEAREST_MIPMAP_LINEAR;
  static constexpr Enum LINEAR_MIPMAP_LINEAR = TextureFilter_Enum_LINEAR_MIPMAP_LINEAR;
  static constexpr Enum CLAMP_TO_EDGE = TextureFilter_Enum_CLAMP_TO_EDGE;
  static constexpr Enum MIRRORED_REPEAT = TextureFilter_Enum_MIRRORED_REPEAT;
  static constexpr Enum REPEAT = TextureFilter_Enum_REPEAT;
  static constexpr Enum CLAMP_TO_BORDER = TextureFilter_Enum_CLAMP_TO_BORDER;
  static inline bool Enum_IsValid(int value) {
    return TextureFilter_Enum_IsValid(value);
  }
  static constexpr Enum Enum_MIN = TextureFilter_Enum_Enum_MIN;
  static constexpr Enum Enum_MAX = TextureFilter_Enum_Enum_MAX;
  static constexpr int Enum_ARRAYSIZE = TextureFilter_Enum_Enum_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Enum_descriptor() {
    return TextureFilter_Enum_descriptor();
  }
  template <typename T>
  static inline const std::string& Enum_Name(T value) {
    return TextureFilter_Enum_Name(value);
  }
  static inline bool Enum_Parse(absl::string_view name, Enum* value) {
    return TextureFilter_Enum_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kValueFieldNumber = 1,
  };
  // .frame.proto.TextureFilter.Enum value = 1;
  void clear_value() ;
  ::frame::proto::TextureFilter_Enum value() const;
  void set_value(::frame::proto::TextureFilter_Enum value);

  private:
  ::frame::proto::TextureFilter_Enum _internal_value() const;
  void _internal_set_value(::frame::proto::TextureFilter_Enum value);

  public:
  // @@protoc_insertion_point(class_scope:frame.proto.TextureFilter)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TextureFilter& from_msg);
    int value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_texture_2eproto;
};
// -------------------------------------------------------------------

class CubeMapFiles final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:frame.proto.CubeMapFiles) */ {
 public:
  inline CubeMapFiles() : CubeMapFiles(nullptr) {}
  ~CubeMapFiles() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CubeMapFiles* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CubeMapFiles));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CubeMapFiles(
      ::google::protobuf::internal::ConstantInitialized);

  inline CubeMapFiles(const CubeMapFiles& from) : CubeMapFiles(nullptr, from) {}
  inline CubeMapFiles(CubeMapFiles&& from) noexcept
      : CubeMapFiles(nullptr, std::move(from)) {}
  inline CubeMapFiles& operator=(const CubeMapFiles& from) {
    CopyFrom(from);
    return *this;
  }
  inline CubeMapFiles& operator=(CubeMapFiles&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CubeMapFiles& default_instance() {
    return *internal_default_instance();
  }
  static inline const CubeMapFiles* internal_default_instance() {
    return reinterpret_cast<const CubeMapFiles*>(
        &_CubeMapFiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(CubeMapFiles& a, CubeMapFiles& b) { a.Swap(&b); }
  inline void Swap(CubeMapFiles* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CubeMapFiles* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CubeMapFiles* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CubeMapFiles>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CubeMapFiles& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CubeMapFiles& from) { CubeMapFiles::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CubeMapFiles* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "frame.proto.CubeMapFiles"; }

 protected:
  explicit CubeMapFiles(::google::protobuf::Arena* arena);
  CubeMapFiles(::google::protobuf::Arena* arena, const CubeMapFiles& from);
  CubeMapFiles(::google::protobuf::Arena* arena, CubeMapFiles&& from) noexcept
      : CubeMapFiles(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPositiveXFieldNumber = 1,
    kNegativeXFieldNumber = 2,
    kPositiveYFieldNumber = 3,
    kNegativeYFieldNumber = 4,
    kPositiveZFieldNumber = 5,
    kNegativeZFieldNumber = 6,
  };
  // string positive_x = 1;
  void clear_positive_x() ;
  const std::string& positive_x() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_positive_x(Arg_&& arg, Args_... args);
  std::string* mutable_positive_x();
  PROTOBUF_NODISCARD std::string* release_positive_x();
  void set_allocated_positive_x(std::string* value);

  private:
  const std::string& _internal_positive_x() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_positive_x(
      const std::string& value);
  std::string* _internal_mutable_positive_x();

  public:
  // string negative_x = 2;
  void clear_negative_x() ;
  const std::string& negative_x() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_negative_x(Arg_&& arg, Args_... args);
  std::string* mutable_negative_x();
  PROTOBUF_NODISCARD std::string* release_negative_x();
  void set_allocated_negative_x(std::string* value);

  private:
  const std::string& _internal_negative_x() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_negative_x(
      const std::string& value);
  std::string* _internal_mutable_negative_x();

  public:
  // string positive_y = 3;
  void clear_positive_y() ;
  const std::string& positive_y() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_positive_y(Arg_&& arg, Args_... args);
  std::string* mutable_positive_y();
  PROTOBUF_NODISCARD std::string* release_positive_y();
  void set_allocated_positive_y(std::string* value);

  private:
  const std::string& _internal_positive_y() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_positive_y(
      const std::string& value);
  std::string* _internal_mutable_positive_y();

  public:
  // string negative_y = 4;
  void clear_negative_y() ;
  const std::string& negative_y() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_negative_y(Arg_&& arg, Args_... args);
  std::string* mutable_negative_y();
  PROTOBUF_NODISCARD std::string* release_negative_y();
  void set_allocated_negative_y(std::string* value);

  private:
  const std::string& _internal_negative_y() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_negative_y(
      const std::string& value);
  std::string* _internal_mutable_negative_y();

  public:
  // string positive_z = 5;
  void clear_positive_z() ;
  const std::string& positive_z() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_positive_z(Arg_&& arg, Args_... args);
  std::string* mutable_positive_z();
  PROTOBUF_NODISCARD std::string* release_positive_z();
  void set_allocated_positive_z(std::string* value);

  private:
  const std::string& _internal_positive_z() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_positive_z(
      const std::string& value);
  std::string* _internal_mutable_positive_z();

  public:
  // string negative_z = 6;
  void clear_negative_z() ;
  const std::string& negative_z() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_negative_z(Arg_&& arg, Args_... args);
  std::string* mutable_negative_z();
  PROTOBUF_NODISCARD std::string* release_negative_z();
  void set_allocated_negative_z(std::string* value);

  private:
  const std::string& _internal_negative_z() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_negative_z(
      const std::string& value);
  std::string* _internal_mutable_negative_z();

  public:
  // @@protoc_insertion_point(class_scope:frame.proto.CubeMapFiles)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      93, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CubeMapFiles& from_msg);
    ::google::protobuf::internal::ArenaStringPtr positive_x_;
    ::google::protobuf::internal::ArenaStringPtr negative_x_;
    ::google::protobuf::internal::ArenaStringPtr positive_y_;
    ::google::protobuf::internal::ArenaStringPtr negative_y_;
    ::google::protobuf::internal::ArenaStringPtr positive_z_;
    ::google::protobuf::internal::ArenaStringPtr negative_z_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_texture_2eproto;
};
// -------------------------------------------------------------------

class Texture final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:frame.proto.Texture) */ {
 public:
  inline Texture() : Texture(nullptr) {}
  ~Texture() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Texture* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Texture));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Texture(
      ::google::protobuf::internal::ConstantInitialized);

  inline Texture(const Texture& from) : Texture(nullptr, from) {}
  inline Texture(Texture&& from) noexcept
      : Texture(nullptr, std::move(from)) {}
  inline Texture& operator=(const Texture& from) {
    CopyFrom(from);
    return *this;
  }
  inline Texture& operator=(Texture&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Texture& default_instance() {
    return *internal_default_instance();
  }
  enum TextureOneofCase {
    kPixels = 13,
    kFileName = 14,
    kPlugin = 17,
    kFileNames = 15,
    TEXTURE_ONEOF_NOT_SET = 0,
  };
  static inline const Texture* internal_default_instance() {
    return reinterpret_cast<const Texture*>(
        &_Texture_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Texture& a, Texture& b) { a.Swap(&b); }
  inline void Swap(Texture* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Texture* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Texture* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Texture>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Texture& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Texture& from) { Texture::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Texture* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "frame.proto.Texture"; }

 protected:
  explicit Texture(::google::protobuf::Arena* arena);
  Texture(::google::protobuf::Arena* arena, const Texture& from);
  Texture(::google::protobuf::Arena* arena, Texture&& from) noexcept
      : Texture(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kSizeFieldNumber = 2,
    kPixelElementSizeFieldNumber = 6,
    kPixelStructureFieldNumber = 7,
    kMinFilterFieldNumber = 8,
    kMagFilterFieldNumber = 9,
    kWrapSFieldNumber = 10,
    kWrapTFieldNumber = 11,
    kClearZFieldNumber = 3,
    kClearColorFieldNumber = 16,
    kMipmapFieldNumber = 4,
    kCubemapFieldNumber = 5,
    kPixelsFieldNumber = 13,
    kFileNameFieldNumber = 14,
    kPluginFieldNumber = 17,
    kFileNamesFieldNumber = 15,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .frame.proto.Size size = 2;
  bool has_size() const;
  void clear_size() ;
  const ::frame::proto::Size& size() const;
  PROTOBUF_NODISCARD ::frame::proto::Size* release_size();
  ::frame::proto::Size* mutable_size();
  void set_allocated_size(::frame::proto::Size* value);
  void unsafe_arena_set_allocated_size(::frame::proto::Size* value);
  ::frame::proto::Size* unsafe_arena_release_size();

  private:
  const ::frame::proto::Size& _internal_size() const;
  ::frame::proto::Size* _internal_mutable_size();

  public:
  // .frame.proto.PixelElementSize pixel_element_size = 6;
  bool has_pixel_element_size() const;
  void clear_pixel_element_size() ;
  const ::frame::proto::PixelElementSize& pixel_element_size() const;
  PROTOBUF_NODISCARD ::frame::proto::PixelElementSize* release_pixel_element_size();
  ::frame::proto::PixelElementSize* mutable_pixel_element_size();
  void set_allocated_pixel_element_size(::frame::proto::PixelElementSize* value);
  void unsafe_arena_set_allocated_pixel_element_size(::frame::proto::PixelElementSize* value);
  ::frame::proto::PixelElementSize* unsafe_arena_release_pixel_element_size();

  private:
  const ::frame::proto::PixelElementSize& _internal_pixel_element_size() const;
  ::frame::proto::PixelElementSize* _internal_mutable_pixel_element_size();

  public:
  // .frame.proto.PixelStructure pixel_structure = 7;
  bool has_pixel_structure() const;
  void clear_pixel_structure() ;
  const ::frame::proto::PixelStructure& pixel_structure() const;
  PROTOBUF_NODISCARD ::frame::proto::PixelStructure* release_pixel_structure();
  ::frame::proto::PixelStructure* mutable_pixel_structure();
  void set_allocated_pixel_structure(::frame::proto::PixelStructure* value);
  void unsafe_arena_set_allocated_pixel_structure(::frame::proto::PixelStructure* value);
  ::frame::proto::PixelStructure* unsafe_arena_release_pixel_structure();

  private:
  const ::frame::proto::PixelStructure& _internal_pixel_structure() const;
  ::frame::proto::PixelStructure* _internal_mutable_pixel_structure();

  public:
  // .frame.proto.TextureFilter min_filter = 8;
  bool has_min_filter() const;
  void clear_min_filter() ;
  const ::frame::proto::TextureFilter& min_filter() const;
  PROTOBUF_NODISCARD ::frame::proto::TextureFilter* release_min_filter();
  ::frame::proto::TextureFilter* mutable_min_filter();
  void set_allocated_min_filter(::frame::proto::TextureFilter* value);
  void unsafe_arena_set_allocated_min_filter(::frame::proto::TextureFilter* value);
  ::frame::proto::TextureFilter* unsafe_arena_release_min_filter();

  private:
  const ::frame::proto::TextureFilter& _internal_min_filter() const;
  ::frame::proto::TextureFilter* _internal_mutable_min_filter();

  public:
  // .frame.proto.TextureFilter mag_filter = 9;
  bool has_mag_filter() const;
  void clear_mag_filter() ;
  const ::frame::proto::TextureFilter& mag_filter() const;
  PROTOBUF_NODISCARD ::frame::proto::TextureFilter* release_mag_filter();
  ::frame::proto::TextureFilter* mutable_mag_filter();
  void set_allocated_mag_filter(::frame::proto::TextureFilter* value);
  void unsafe_arena_set_allocated_mag_filter(::frame::proto::TextureFilter* value);
  ::frame::proto::TextureFilter* unsafe_arena_release_mag_filter();

  private:
  const ::frame::proto::TextureFilter& _internal_mag_filter() const;
  ::frame::proto::TextureFilter* _internal_mutable_mag_filter();

  public:
  // .frame.proto.TextureFilter wrap_s = 10;
  bool has_wrap_s() const;
  void clear_wrap_s() ;
  const ::frame::proto::TextureFilter& wrap_s() const;
  PROTOBUF_NODISCARD ::frame::proto::TextureFilter* release_wrap_s();
  ::frame::proto::TextureFilter* mutable_wrap_s();
  void set_allocated_wrap_s(::frame::proto::TextureFilter* value);
  void unsafe_arena_set_allocated_wrap_s(::frame::proto::TextureFilter* value);
  ::frame::proto::TextureFilter* unsafe_arena_release_wrap_s();

  private:
  const ::frame::proto::TextureFilter& _internal_wrap_s() const;
  ::frame::proto::TextureFilter* _internal_mutable_wrap_s();

  public:
  // .frame.proto.TextureFilter wrap_t = 11;
  bool has_wrap_t() const;
  void clear_wrap_t() ;
  const ::frame::proto::TextureFilter& wrap_t() const;
  PROTOBUF_NODISCARD ::frame::proto::TextureFilter* release_wrap_t();
  ::frame::proto::TextureFilter* mutable_wrap_t();
  void set_allocated_wrap_t(::frame::proto::TextureFilter* value);
  void unsafe_arena_set_allocated_wrap_t(::frame::proto::TextureFilter* value);
  ::frame::proto::TextureFilter* unsafe_arena_release_wrap_t();

  private:
  const ::frame::proto::TextureFilter& _internal_wrap_t() const;
  ::frame::proto::TextureFilter* _internal_mutable_wrap_t();

  public:
  // bool clear_z = 3;
  void clear_clear_z() ;
  bool clear_z() const;
  void set_clear_z(bool value);

  private:
  bool _internal_clear_z() const;
  void _internal_set_clear_z(bool value);

  public:
  // bool clear_color = 16;
  void clear_clear_color() ;
  bool clear_color() const;
  void set_clear_color(bool value);

  private:
  bool _internal_clear_color() const;
  void _internal_set_clear_color(bool value);

  public:
  // bool mipmap = 4;
  void clear_mipmap() ;
  bool mipmap() const;
  void set_mipmap(bool value);

  private:
  bool _internal_mipmap() const;
  void _internal_set_mipmap(bool value);

  public:
  // bool cubemap = 5;
  void clear_cubemap() ;
  bool cubemap() const;
  void set_cubemap(bool value);

  private:
  bool _internal_cubemap() const;
  void _internal_set_cubemap(bool value);

  public:
  // bytes pixels = 13;
  bool has_pixels() const;
  void clear_pixels() ;
  const std::string& pixels() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pixels(Arg_&& arg, Args_... args);
  std::string* mutable_pixels();
  PROTOBUF_NODISCARD std::string* release_pixels();
  void set_allocated_pixels(std::string* value);

  private:
  const std::string& _internal_pixels() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pixels(
      const std::string& value);
  std::string* _internal_mutable_pixels();

  public:
  // string file_name = 14;
  bool has_file_name() const;
  void clear_file_name() ;
  const std::string& file_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_name(Arg_&& arg, Args_... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* value);

  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(
      const std::string& value);
  std::string* _internal_mutable_file_name();

  public:
  // .frame.proto.Plugin plugin = 17;
  bool has_plugin() const;
  private:
  bool _internal_has_plugin() const;

  public:
  void clear_plugin() ;
  const ::frame::proto::Plugin& plugin() const;
  PROTOBUF_NODISCARD ::frame::proto::Plugin* release_plugin();
  ::frame::proto::Plugin* mutable_plugin();
  void set_allocated_plugin(::frame::proto::Plugin* value);
  void unsafe_arena_set_allocated_plugin(::frame::proto::Plugin* value);
  ::frame::proto::Plugin* unsafe_arena_release_plugin();

  private:
  const ::frame::proto::Plugin& _internal_plugin() const;
  ::frame::proto::Plugin* _internal_mutable_plugin();

  public:
  // .frame.proto.CubeMapFiles file_names = 15;
  bool has_file_names() const;
  private:
  bool _internal_has_file_names() const;

  public:
  void clear_file_names() ;
  const ::frame::proto::CubeMapFiles& file_names() const;
  PROTOBUF_NODISCARD ::frame::proto::CubeMapFiles* release_file_names();
  ::frame::proto::CubeMapFiles* mutable_file_names();
  void set_allocated_file_names(::frame::proto::CubeMapFiles* value);
  void unsafe_arena_set_allocated_file_names(::frame::proto::CubeMapFiles* value);
  ::frame::proto::CubeMapFiles* unsafe_arena_release_file_names();

  private:
  const ::frame::proto::CubeMapFiles& _internal_file_names() const;
  ::frame::proto::CubeMapFiles* _internal_mutable_file_names();

  public:
  void clear_texture_oneof();
  TextureOneofCase texture_oneof_case() const;
  // @@protoc_insertion_point(class_scope:frame.proto.Texture)
 private:
  class _Internal;
  void set_has_pixels();
  void set_has_file_name();
  void set_has_plugin();
  void set_has_file_names();
  inline bool has_texture_oneof() const;
  inline void clear_has_texture_oneof();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 16, 9,
      57, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Texture& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::frame::proto::Size* size_;
    ::frame::proto::PixelElementSize* pixel_element_size_;
    ::frame::proto::PixelStructure* pixel_structure_;
    ::frame::proto::TextureFilter* min_filter_;
    ::frame::proto::TextureFilter* mag_filter_;
    ::frame::proto::TextureFilter* wrap_s_;
    ::frame::proto::TextureFilter* wrap_t_;
    bool clear_z_;
    bool clear_color_;
    bool mipmap_;
    bool cubemap_;
    union TextureOneofUnion {
      constexpr TextureOneofUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr pixels_;
      ::google::protobuf::internal::ArenaStringPtr file_name_;
      ::frame::proto::Plugin* plugin_;
      ::frame::proto::CubeMapFiles* file_names_;
    } texture_oneof_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_texture_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TextureFilter

// .frame.proto.TextureFilter.Enum value = 1;
inline void TextureFilter::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = 0;
}
inline ::frame::proto::TextureFilter_Enum TextureFilter::value() const {
  // @@protoc_insertion_point(field_get:frame.proto.TextureFilter.value)
  return _internal_value();
}
inline void TextureFilter::set_value(::frame::proto::TextureFilter_Enum value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:frame.proto.TextureFilter.value)
}
inline ::frame::proto::TextureFilter_Enum TextureFilter::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::frame::proto::TextureFilter_Enum>(_impl_.value_);
}
inline void TextureFilter::_internal_set_value(::frame::proto::TextureFilter_Enum value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// TextureFrame

// .frame.proto.TextureFrame.Enum value = 1;
inline void TextureFrame::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = 0;
}
inline ::frame::proto::TextureFrame_Enum TextureFrame::value() const {
  // @@protoc_insertion_point(field_get:frame.proto.TextureFrame.value)
  return _internal_value();
}
inline void TextureFrame::set_value(::frame::proto::TextureFrame_Enum value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:frame.proto.TextureFrame.value)
}
inline ::frame::proto::TextureFrame_Enum TextureFrame::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::frame::proto::TextureFrame_Enum>(_impl_.value_);
}
inline void TextureFrame::_internal_set_value(::frame::proto::TextureFrame_Enum value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// CubeMapFiles

// string positive_x = 1;
inline void CubeMapFiles::clear_positive_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positive_x_.ClearToEmpty();
}
inline const std::string& CubeMapFiles::positive_x() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.CubeMapFiles.positive_x)
  return _internal_positive_x();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CubeMapFiles::set_positive_x(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positive_x_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:frame.proto.CubeMapFiles.positive_x)
}
inline std::string* CubeMapFiles::mutable_positive_x() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_positive_x();
  // @@protoc_insertion_point(field_mutable:frame.proto.CubeMapFiles.positive_x)
  return _s;
}
inline const std::string& CubeMapFiles::_internal_positive_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.positive_x_.Get();
}
inline void CubeMapFiles::_internal_set_positive_x(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positive_x_.Set(value, GetArena());
}
inline std::string* CubeMapFiles::_internal_mutable_positive_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.positive_x_.Mutable( GetArena());
}
inline std::string* CubeMapFiles::release_positive_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:frame.proto.CubeMapFiles.positive_x)
  return _impl_.positive_x_.Release();
}
inline void CubeMapFiles::set_allocated_positive_x(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positive_x_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.positive_x_.IsDefault()) {
    _impl_.positive_x_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:frame.proto.CubeMapFiles.positive_x)
}

// string negative_x = 2;
inline void CubeMapFiles::clear_negative_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.negative_x_.ClearToEmpty();
}
inline const std::string& CubeMapFiles::negative_x() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.CubeMapFiles.negative_x)
  return _internal_negative_x();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CubeMapFiles::set_negative_x(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.negative_x_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:frame.proto.CubeMapFiles.negative_x)
}
inline std::string* CubeMapFiles::mutable_negative_x() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_negative_x();
  // @@protoc_insertion_point(field_mutable:frame.proto.CubeMapFiles.negative_x)
  return _s;
}
inline const std::string& CubeMapFiles::_internal_negative_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.negative_x_.Get();
}
inline void CubeMapFiles::_internal_set_negative_x(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.negative_x_.Set(value, GetArena());
}
inline std::string* CubeMapFiles::_internal_mutable_negative_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.negative_x_.Mutable( GetArena());
}
inline std::string* CubeMapFiles::release_negative_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:frame.proto.CubeMapFiles.negative_x)
  return _impl_.negative_x_.Release();
}
inline void CubeMapFiles::set_allocated_negative_x(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.negative_x_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.negative_x_.IsDefault()) {
    _impl_.negative_x_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:frame.proto.CubeMapFiles.negative_x)
}

// string positive_y = 3;
inline void CubeMapFiles::clear_positive_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positive_y_.ClearToEmpty();
}
inline const std::string& CubeMapFiles::positive_y() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.CubeMapFiles.positive_y)
  return _internal_positive_y();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CubeMapFiles::set_positive_y(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positive_y_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:frame.proto.CubeMapFiles.positive_y)
}
inline std::string* CubeMapFiles::mutable_positive_y() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_positive_y();
  // @@protoc_insertion_point(field_mutable:frame.proto.CubeMapFiles.positive_y)
  return _s;
}
inline const std::string& CubeMapFiles::_internal_positive_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.positive_y_.Get();
}
inline void CubeMapFiles::_internal_set_positive_y(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positive_y_.Set(value, GetArena());
}
inline std::string* CubeMapFiles::_internal_mutable_positive_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.positive_y_.Mutable( GetArena());
}
inline std::string* CubeMapFiles::release_positive_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:frame.proto.CubeMapFiles.positive_y)
  return _impl_.positive_y_.Release();
}
inline void CubeMapFiles::set_allocated_positive_y(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positive_y_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.positive_y_.IsDefault()) {
    _impl_.positive_y_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:frame.proto.CubeMapFiles.positive_y)
}

// string negative_y = 4;
inline void CubeMapFiles::clear_negative_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.negative_y_.ClearToEmpty();
}
inline const std::string& CubeMapFiles::negative_y() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.CubeMapFiles.negative_y)
  return _internal_negative_y();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CubeMapFiles::set_negative_y(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.negative_y_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:frame.proto.CubeMapFiles.negative_y)
}
inline std::string* CubeMapFiles::mutable_negative_y() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_negative_y();
  // @@protoc_insertion_point(field_mutable:frame.proto.CubeMapFiles.negative_y)
  return _s;
}
inline const std::string& CubeMapFiles::_internal_negative_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.negative_y_.Get();
}
inline void CubeMapFiles::_internal_set_negative_y(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.negative_y_.Set(value, GetArena());
}
inline std::string* CubeMapFiles::_internal_mutable_negative_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.negative_y_.Mutable( GetArena());
}
inline std::string* CubeMapFiles::release_negative_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:frame.proto.CubeMapFiles.negative_y)
  return _impl_.negative_y_.Release();
}
inline void CubeMapFiles::set_allocated_negative_y(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.negative_y_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.negative_y_.IsDefault()) {
    _impl_.negative_y_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:frame.proto.CubeMapFiles.negative_y)
}

// string positive_z = 5;
inline void CubeMapFiles::clear_positive_z() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positive_z_.ClearToEmpty();
}
inline const std::string& CubeMapFiles::positive_z() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.CubeMapFiles.positive_z)
  return _internal_positive_z();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CubeMapFiles::set_positive_z(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positive_z_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:frame.proto.CubeMapFiles.positive_z)
}
inline std::string* CubeMapFiles::mutable_positive_z() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_positive_z();
  // @@protoc_insertion_point(field_mutable:frame.proto.CubeMapFiles.positive_z)
  return _s;
}
inline const std::string& CubeMapFiles::_internal_positive_z() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.positive_z_.Get();
}
inline void CubeMapFiles::_internal_set_positive_z(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positive_z_.Set(value, GetArena());
}
inline std::string* CubeMapFiles::_internal_mutable_positive_z() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.positive_z_.Mutable( GetArena());
}
inline std::string* CubeMapFiles::release_positive_z() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:frame.proto.CubeMapFiles.positive_z)
  return _impl_.positive_z_.Release();
}
inline void CubeMapFiles::set_allocated_positive_z(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positive_z_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.positive_z_.IsDefault()) {
    _impl_.positive_z_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:frame.proto.CubeMapFiles.positive_z)
}

// string negative_z = 6;
inline void CubeMapFiles::clear_negative_z() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.negative_z_.ClearToEmpty();
}
inline const std::string& CubeMapFiles::negative_z() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.CubeMapFiles.negative_z)
  return _internal_negative_z();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CubeMapFiles::set_negative_z(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.negative_z_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:frame.proto.CubeMapFiles.negative_z)
}
inline std::string* CubeMapFiles::mutable_negative_z() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_negative_z();
  // @@protoc_insertion_point(field_mutable:frame.proto.CubeMapFiles.negative_z)
  return _s;
}
inline const std::string& CubeMapFiles::_internal_negative_z() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.negative_z_.Get();
}
inline void CubeMapFiles::_internal_set_negative_z(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.negative_z_.Set(value, GetArena());
}
inline std::string* CubeMapFiles::_internal_mutable_negative_z() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.negative_z_.Mutable( GetArena());
}
inline std::string* CubeMapFiles::release_negative_z() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:frame.proto.CubeMapFiles.negative_z)
  return _impl_.negative_z_.Release();
}
inline void CubeMapFiles::set_allocated_negative_z(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.negative_z_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.negative_z_.IsDefault()) {
    _impl_.negative_z_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:frame.proto.CubeMapFiles.negative_z)
}

// -------------------------------------------------------------------

// Texture

// string name = 1;
inline void Texture::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Texture::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Texture.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Texture::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:frame.proto.Texture.name)
}
inline std::string* Texture::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:frame.proto.Texture.name)
  return _s;
}
inline const std::string& Texture::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Texture::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Texture::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Texture::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:frame.proto.Texture.name)
  return _impl_.name_.Release();
}
inline void Texture::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Texture.name)
}

// .frame.proto.Size size = 2;
inline bool Texture::has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.size_ != nullptr);
  return value;
}
inline const ::frame::proto::Size& Texture::_internal_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::frame::proto::Size* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::frame::proto::Size&>(::frame::proto::_Size_default_instance_);
}
inline const ::frame::proto::Size& Texture::size() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Texture.size)
  return _internal_size();
}
inline void Texture::unsafe_arena_set_allocated_size(::frame::proto::Size* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = reinterpret_cast<::frame::proto::Size*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Texture.size)
}
inline ::frame::proto::Size* Texture::release_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::frame::proto::Size* released = _impl_.size_;
  _impl_.size_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::frame::proto::Size* Texture::unsafe_arena_release_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:frame.proto.Texture.size)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::frame::proto::Size* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::frame::proto::Size* Texture::_internal_mutable_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.size_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::frame::proto::Size>(GetArena());
    _impl_.size_ = reinterpret_cast<::frame::proto::Size*>(p);
  }
  return _impl_.size_;
}
inline ::frame::proto::Size* Texture::mutable_size() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::frame::proto::Size* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:frame.proto.Texture.size)
  return _msg;
}
inline void Texture::set_allocated_size(::frame::proto::Size* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.size_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.size_ = reinterpret_cast<::frame::proto::Size*>(value);
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Texture.size)
}

// bool clear_z = 3;
inline void Texture::clear_clear_z() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clear_z_ = false;
}
inline bool Texture::clear_z() const {
  // @@protoc_insertion_point(field_get:frame.proto.Texture.clear_z)
  return _internal_clear_z();
}
inline void Texture::set_clear_z(bool value) {
  _internal_set_clear_z(value);
  // @@protoc_insertion_point(field_set:frame.proto.Texture.clear_z)
}
inline bool Texture::_internal_clear_z() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.clear_z_;
}
inline void Texture::_internal_set_clear_z(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clear_z_ = value;
}

// bool clear_color = 16;
inline void Texture::clear_clear_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clear_color_ = false;
}
inline bool Texture::clear_color() const {
  // @@protoc_insertion_point(field_get:frame.proto.Texture.clear_color)
  return _internal_clear_color();
}
inline void Texture::set_clear_color(bool value) {
  _internal_set_clear_color(value);
  // @@protoc_insertion_point(field_set:frame.proto.Texture.clear_color)
}
inline bool Texture::_internal_clear_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.clear_color_;
}
inline void Texture::_internal_set_clear_color(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clear_color_ = value;
}

// bool mipmap = 4;
inline void Texture::clear_mipmap() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mipmap_ = false;
}
inline bool Texture::mipmap() const {
  // @@protoc_insertion_point(field_get:frame.proto.Texture.mipmap)
  return _internal_mipmap();
}
inline void Texture::set_mipmap(bool value) {
  _internal_set_mipmap(value);
  // @@protoc_insertion_point(field_set:frame.proto.Texture.mipmap)
}
inline bool Texture::_internal_mipmap() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mipmap_;
}
inline void Texture::_internal_set_mipmap(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mipmap_ = value;
}

// bool cubemap = 5;
inline void Texture::clear_cubemap() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cubemap_ = false;
}
inline bool Texture::cubemap() const {
  // @@protoc_insertion_point(field_get:frame.proto.Texture.cubemap)
  return _internal_cubemap();
}
inline void Texture::set_cubemap(bool value) {
  _internal_set_cubemap(value);
  // @@protoc_insertion_point(field_set:frame.proto.Texture.cubemap)
}
inline bool Texture::_internal_cubemap() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cubemap_;
}
inline void Texture::_internal_set_cubemap(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cubemap_ = value;
}

// .frame.proto.PixelElementSize pixel_element_size = 6;
inline bool Texture::has_pixel_element_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pixel_element_size_ != nullptr);
  return value;
}
inline const ::frame::proto::PixelElementSize& Texture::_internal_pixel_element_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::frame::proto::PixelElementSize* p = _impl_.pixel_element_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::frame::proto::PixelElementSize&>(::frame::proto::_PixelElementSize_default_instance_);
}
inline const ::frame::proto::PixelElementSize& Texture::pixel_element_size() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Texture.pixel_element_size)
  return _internal_pixel_element_size();
}
inline void Texture::unsafe_arena_set_allocated_pixel_element_size(::frame::proto::PixelElementSize* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pixel_element_size_);
  }
  _impl_.pixel_element_size_ = reinterpret_cast<::frame::proto::PixelElementSize*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Texture.pixel_element_size)
}
inline ::frame::proto::PixelElementSize* Texture::release_pixel_element_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::frame::proto::PixelElementSize* released = _impl_.pixel_element_size_;
  _impl_.pixel_element_size_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::frame::proto::PixelElementSize* Texture::unsafe_arena_release_pixel_element_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:frame.proto.Texture.pixel_element_size)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::frame::proto::PixelElementSize* temp = _impl_.pixel_element_size_;
  _impl_.pixel_element_size_ = nullptr;
  return temp;
}
inline ::frame::proto::PixelElementSize* Texture::_internal_mutable_pixel_element_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pixel_element_size_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::frame::proto::PixelElementSize>(GetArena());
    _impl_.pixel_element_size_ = reinterpret_cast<::frame::proto::PixelElementSize*>(p);
  }
  return _impl_.pixel_element_size_;
}
inline ::frame::proto::PixelElementSize* Texture::mutable_pixel_element_size() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::frame::proto::PixelElementSize* _msg = _internal_mutable_pixel_element_size();
  // @@protoc_insertion_point(field_mutable:frame.proto.Texture.pixel_element_size)
  return _msg;
}
inline void Texture::set_allocated_pixel_element_size(::frame::proto::PixelElementSize* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pixel_element_size_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.pixel_element_size_ = reinterpret_cast<::frame::proto::PixelElementSize*>(value);
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Texture.pixel_element_size)
}

// .frame.proto.PixelStructure pixel_structure = 7;
inline bool Texture::has_pixel_structure() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pixel_structure_ != nullptr);
  return value;
}
inline const ::frame::proto::PixelStructure& Texture::_internal_pixel_structure() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::frame::proto::PixelStructure* p = _impl_.pixel_structure_;
  return p != nullptr ? *p : reinterpret_cast<const ::frame::proto::PixelStructure&>(::frame::proto::_PixelStructure_default_instance_);
}
inline const ::frame::proto::PixelStructure& Texture::pixel_structure() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Texture.pixel_structure)
  return _internal_pixel_structure();
}
inline void Texture::unsafe_arena_set_allocated_pixel_structure(::frame::proto::PixelStructure* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pixel_structure_);
  }
  _impl_.pixel_structure_ = reinterpret_cast<::frame::proto::PixelStructure*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Texture.pixel_structure)
}
inline ::frame::proto::PixelStructure* Texture::release_pixel_structure() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::frame::proto::PixelStructure* released = _impl_.pixel_structure_;
  _impl_.pixel_structure_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::frame::proto::PixelStructure* Texture::unsafe_arena_release_pixel_structure() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:frame.proto.Texture.pixel_structure)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::frame::proto::PixelStructure* temp = _impl_.pixel_structure_;
  _impl_.pixel_structure_ = nullptr;
  return temp;
}
inline ::frame::proto::PixelStructure* Texture::_internal_mutable_pixel_structure() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pixel_structure_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::frame::proto::PixelStructure>(GetArena());
    _impl_.pixel_structure_ = reinterpret_cast<::frame::proto::PixelStructure*>(p);
  }
  return _impl_.pixel_structure_;
}
inline ::frame::proto::PixelStructure* Texture::mutable_pixel_structure() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::frame::proto::PixelStructure* _msg = _internal_mutable_pixel_structure();
  // @@protoc_insertion_point(field_mutable:frame.proto.Texture.pixel_structure)
  return _msg;
}
inline void Texture::set_allocated_pixel_structure(::frame::proto::PixelStructure* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pixel_structure_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.pixel_structure_ = reinterpret_cast<::frame::proto::PixelStructure*>(value);
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Texture.pixel_structure)
}

// .frame.proto.TextureFilter min_filter = 8;
inline bool Texture::has_min_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.min_filter_ != nullptr);
  return value;
}
inline void Texture::clear_min_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.min_filter_ != nullptr) _impl_.min_filter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::frame::proto::TextureFilter& Texture::_internal_min_filter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::frame::proto::TextureFilter* p = _impl_.min_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::frame::proto::TextureFilter&>(::frame::proto::_TextureFilter_default_instance_);
}
inline const ::frame::proto::TextureFilter& Texture::min_filter() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Texture.min_filter)
  return _internal_min_filter();
}
inline void Texture::unsafe_arena_set_allocated_min_filter(::frame::proto::TextureFilter* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.min_filter_);
  }
  _impl_.min_filter_ = reinterpret_cast<::frame::proto::TextureFilter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Texture.min_filter)
}
inline ::frame::proto::TextureFilter* Texture::release_min_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::frame::proto::TextureFilter* released = _impl_.min_filter_;
  _impl_.min_filter_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::frame::proto::TextureFilter* Texture::unsafe_arena_release_min_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:frame.proto.Texture.min_filter)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::frame::proto::TextureFilter* temp = _impl_.min_filter_;
  _impl_.min_filter_ = nullptr;
  return temp;
}
inline ::frame::proto::TextureFilter* Texture::_internal_mutable_min_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.min_filter_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::frame::proto::TextureFilter>(GetArena());
    _impl_.min_filter_ = reinterpret_cast<::frame::proto::TextureFilter*>(p);
  }
  return _impl_.min_filter_;
}
inline ::frame::proto::TextureFilter* Texture::mutable_min_filter() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::frame::proto::TextureFilter* _msg = _internal_mutable_min_filter();
  // @@protoc_insertion_point(field_mutable:frame.proto.Texture.min_filter)
  return _msg;
}
inline void Texture::set_allocated_min_filter(::frame::proto::TextureFilter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.min_filter_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.min_filter_ = reinterpret_cast<::frame::proto::TextureFilter*>(value);
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Texture.min_filter)
}

// .frame.proto.TextureFilter mag_filter = 9;
inline bool Texture::has_mag_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mag_filter_ != nullptr);
  return value;
}
inline void Texture::clear_mag_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.mag_filter_ != nullptr) _impl_.mag_filter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::frame::proto::TextureFilter& Texture::_internal_mag_filter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::frame::proto::TextureFilter* p = _impl_.mag_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::frame::proto::TextureFilter&>(::frame::proto::_TextureFilter_default_instance_);
}
inline const ::frame::proto::TextureFilter& Texture::mag_filter() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Texture.mag_filter)
  return _internal_mag_filter();
}
inline void Texture::unsafe_arena_set_allocated_mag_filter(::frame::proto::TextureFilter* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.mag_filter_);
  }
  _impl_.mag_filter_ = reinterpret_cast<::frame::proto::TextureFilter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Texture.mag_filter)
}
inline ::frame::proto::TextureFilter* Texture::release_mag_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::frame::proto::TextureFilter* released = _impl_.mag_filter_;
  _impl_.mag_filter_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::frame::proto::TextureFilter* Texture::unsafe_arena_release_mag_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:frame.proto.Texture.mag_filter)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::frame::proto::TextureFilter* temp = _impl_.mag_filter_;
  _impl_.mag_filter_ = nullptr;
  return temp;
}
inline ::frame::proto::TextureFilter* Texture::_internal_mutable_mag_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.mag_filter_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::frame::proto::TextureFilter>(GetArena());
    _impl_.mag_filter_ = reinterpret_cast<::frame::proto::TextureFilter*>(p);
  }
  return _impl_.mag_filter_;
}
inline ::frame::proto::TextureFilter* Texture::mutable_mag_filter() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::frame::proto::TextureFilter* _msg = _internal_mutable_mag_filter();
  // @@protoc_insertion_point(field_mutable:frame.proto.Texture.mag_filter)
  return _msg;
}
inline void Texture::set_allocated_mag_filter(::frame::proto::TextureFilter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.mag_filter_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.mag_filter_ = reinterpret_cast<::frame::proto::TextureFilter*>(value);
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Texture.mag_filter)
}

// .frame.proto.TextureFilter wrap_s = 10;
inline bool Texture::has_wrap_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.wrap_s_ != nullptr);
  return value;
}
inline void Texture::clear_wrap_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.wrap_s_ != nullptr) _impl_.wrap_s_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::frame::proto::TextureFilter& Texture::_internal_wrap_s() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::frame::proto::TextureFilter* p = _impl_.wrap_s_;
  return p != nullptr ? *p : reinterpret_cast<const ::frame::proto::TextureFilter&>(::frame::proto::_TextureFilter_default_instance_);
}
inline const ::frame::proto::TextureFilter& Texture::wrap_s() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Texture.wrap_s)
  return _internal_wrap_s();
}
inline void Texture::unsafe_arena_set_allocated_wrap_s(::frame::proto::TextureFilter* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.wrap_s_);
  }
  _impl_.wrap_s_ = reinterpret_cast<::frame::proto::TextureFilter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Texture.wrap_s)
}
inline ::frame::proto::TextureFilter* Texture::release_wrap_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::frame::proto::TextureFilter* released = _impl_.wrap_s_;
  _impl_.wrap_s_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::frame::proto::TextureFilter* Texture::unsafe_arena_release_wrap_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:frame.proto.Texture.wrap_s)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::frame::proto::TextureFilter* temp = _impl_.wrap_s_;
  _impl_.wrap_s_ = nullptr;
  return temp;
}
inline ::frame::proto::TextureFilter* Texture::_internal_mutable_wrap_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.wrap_s_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::frame::proto::TextureFilter>(GetArena());
    _impl_.wrap_s_ = reinterpret_cast<::frame::proto::TextureFilter*>(p);
  }
  return _impl_.wrap_s_;
}
inline ::frame::proto::TextureFilter* Texture::mutable_wrap_s() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::frame::proto::TextureFilter* _msg = _internal_mutable_wrap_s();
  // @@protoc_insertion_point(field_mutable:frame.proto.Texture.wrap_s)
  return _msg;
}
inline void Texture::set_allocated_wrap_s(::frame::proto::TextureFilter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.wrap_s_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.wrap_s_ = reinterpret_cast<::frame::proto::TextureFilter*>(value);
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Texture.wrap_s)
}

// .frame.proto.TextureFilter wrap_t = 11;
inline bool Texture::has_wrap_t() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.wrap_t_ != nullptr);
  return value;
}
inline void Texture::clear_wrap_t() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.wrap_t_ != nullptr) _impl_.wrap_t_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::frame::proto::TextureFilter& Texture::_internal_wrap_t() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::frame::proto::TextureFilter* p = _impl_.wrap_t_;
  return p != nullptr ? *p : reinterpret_cast<const ::frame::proto::TextureFilter&>(::frame::proto::_TextureFilter_default_instance_);
}
inline const ::frame::proto::TextureFilter& Texture::wrap_t() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Texture.wrap_t)
  return _internal_wrap_t();
}
inline void Texture::unsafe_arena_set_allocated_wrap_t(::frame::proto::TextureFilter* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.wrap_t_);
  }
  _impl_.wrap_t_ = reinterpret_cast<::frame::proto::TextureFilter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Texture.wrap_t)
}
inline ::frame::proto::TextureFilter* Texture::release_wrap_t() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::frame::proto::TextureFilter* released = _impl_.wrap_t_;
  _impl_.wrap_t_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::frame::proto::TextureFilter* Texture::unsafe_arena_release_wrap_t() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:frame.proto.Texture.wrap_t)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::frame::proto::TextureFilter* temp = _impl_.wrap_t_;
  _impl_.wrap_t_ = nullptr;
  return temp;
}
inline ::frame::proto::TextureFilter* Texture::_internal_mutable_wrap_t() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.wrap_t_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::frame::proto::TextureFilter>(GetArena());
    _impl_.wrap_t_ = reinterpret_cast<::frame::proto::TextureFilter*>(p);
  }
  return _impl_.wrap_t_;
}
inline ::frame::proto::TextureFilter* Texture::mutable_wrap_t() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000040u;
  ::frame::proto::TextureFilter* _msg = _internal_mutable_wrap_t();
  // @@protoc_insertion_point(field_mutable:frame.proto.Texture.wrap_t)
  return _msg;
}
inline void Texture::set_allocated_wrap_t(::frame::proto::TextureFilter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.wrap_t_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.wrap_t_ = reinterpret_cast<::frame::proto::TextureFilter*>(value);
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Texture.wrap_t)
}

// bytes pixels = 13;
inline bool Texture::has_pixels() const {
  return texture_oneof_case() == kPixels;
}
inline void Texture::set_has_pixels() {
  _impl_._oneof_case_[0] = kPixels;
}
inline void Texture::clear_pixels() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (texture_oneof_case() == kPixels) {
    _impl_.texture_oneof_.pixels_.Destroy();
    clear_has_texture_oneof();
  }
}
inline const std::string& Texture::pixels() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Texture.pixels)
  return _internal_pixels();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Texture::set_pixels(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (texture_oneof_case() != kPixels) {
    clear_texture_oneof();

    set_has_pixels();
    _impl_.texture_oneof_.pixels_.InitDefault();
  }
  _impl_.texture_oneof_.pixels_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:frame.proto.Texture.pixels)
}
inline std::string* Texture::mutable_pixels() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_pixels();
  // @@protoc_insertion_point(field_mutable:frame.proto.Texture.pixels)
  return _s;
}
inline const std::string& Texture::_internal_pixels() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (texture_oneof_case() != kPixels) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.texture_oneof_.pixels_.Get();
}
inline void Texture::_internal_set_pixels(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (texture_oneof_case() != kPixels) {
    clear_texture_oneof();

    set_has_pixels();
    _impl_.texture_oneof_.pixels_.InitDefault();
  }
  _impl_.texture_oneof_.pixels_.Set(value, GetArena());
}
inline std::string* Texture::_internal_mutable_pixels() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (texture_oneof_case() != kPixels) {
    clear_texture_oneof();

    set_has_pixels();
    _impl_.texture_oneof_.pixels_.InitDefault();
  }
  return _impl_.texture_oneof_.pixels_.Mutable( GetArena());
}
inline std::string* Texture::release_pixels() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:frame.proto.Texture.pixels)
  if (texture_oneof_case() != kPixels) {
    return nullptr;
  }
  clear_has_texture_oneof();
  return _impl_.texture_oneof_.pixels_.Release();
}
inline void Texture::set_allocated_pixels(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_texture_oneof()) {
    clear_texture_oneof();
  }
  if (value != nullptr) {
    set_has_pixels();
    _impl_.texture_oneof_.pixels_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Texture.pixels)
}

// string file_name = 14;
inline bool Texture::has_file_name() const {
  return texture_oneof_case() == kFileName;
}
inline void Texture::set_has_file_name() {
  _impl_._oneof_case_[0] = kFileName;
}
inline void Texture::clear_file_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (texture_oneof_case() == kFileName) {
    _impl_.texture_oneof_.file_name_.Destroy();
    clear_has_texture_oneof();
  }
}
inline const std::string& Texture::file_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Texture.file_name)
  return _internal_file_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Texture::set_file_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (texture_oneof_case() != kFileName) {
    clear_texture_oneof();

    set_has_file_name();
    _impl_.texture_oneof_.file_name_.InitDefault();
  }
  _impl_.texture_oneof_.file_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:frame.proto.Texture.file_name)
}
inline std::string* Texture::mutable_file_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:frame.proto.Texture.file_name)
  return _s;
}
inline const std::string& Texture::_internal_file_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (texture_oneof_case() != kFileName) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.texture_oneof_.file_name_.Get();
}
inline void Texture::_internal_set_file_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (texture_oneof_case() != kFileName) {
    clear_texture_oneof();

    set_has_file_name();
    _impl_.texture_oneof_.file_name_.InitDefault();
  }
  _impl_.texture_oneof_.file_name_.Set(value, GetArena());
}
inline std::string* Texture::_internal_mutable_file_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (texture_oneof_case() != kFileName) {
    clear_texture_oneof();

    set_has_file_name();
    _impl_.texture_oneof_.file_name_.InitDefault();
  }
  return _impl_.texture_oneof_.file_name_.Mutable( GetArena());
}
inline std::string* Texture::release_file_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:frame.proto.Texture.file_name)
  if (texture_oneof_case() != kFileName) {
    return nullptr;
  }
  clear_has_texture_oneof();
  return _impl_.texture_oneof_.file_name_.Release();
}
inline void Texture::set_allocated_file_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_texture_oneof()) {
    clear_texture_oneof();
  }
  if (value != nullptr) {
    set_has_file_name();
    _impl_.texture_oneof_.file_name_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Texture.file_name)
}

// .frame.proto.Plugin plugin = 17;
inline bool Texture::has_plugin() const {
  return texture_oneof_case() == kPlugin;
}
inline bool Texture::_internal_has_plugin() const {
  return texture_oneof_case() == kPlugin;
}
inline void Texture::set_has_plugin() {
  _impl_._oneof_case_[0] = kPlugin;
}
inline ::frame::proto::Plugin* Texture::release_plugin() {
  // @@protoc_insertion_point(field_release:frame.proto.Texture.plugin)
  if (texture_oneof_case() == kPlugin) {
    clear_has_texture_oneof();
    auto* temp = _impl_.texture_oneof_.plugin_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.texture_oneof_.plugin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::Plugin& Texture::_internal_plugin() const {
  return texture_oneof_case() == kPlugin ? *_impl_.texture_oneof_.plugin_ : reinterpret_cast<::frame::proto::Plugin&>(::frame::proto::_Plugin_default_instance_);
}
inline const ::frame::proto::Plugin& Texture::plugin() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Texture.plugin)
  return _internal_plugin();
}
inline ::frame::proto::Plugin* Texture::unsafe_arena_release_plugin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Texture.plugin)
  if (texture_oneof_case() == kPlugin) {
    clear_has_texture_oneof();
    auto* temp = _impl_.texture_oneof_.plugin_;
    _impl_.texture_oneof_.plugin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Texture::unsafe_arena_set_allocated_plugin(::frame::proto::Plugin* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_texture_oneof();
  if (value) {
    set_has_plugin();
    _impl_.texture_oneof_.plugin_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Texture.plugin)
}
inline ::frame::proto::Plugin* Texture::_internal_mutable_plugin() {
  if (texture_oneof_case() != kPlugin) {
    clear_texture_oneof();
    set_has_plugin();
    _impl_.texture_oneof_.plugin_ =
        ::google::protobuf::Message::DefaultConstruct<::frame::proto::Plugin>(GetArena());
  }
  return _impl_.texture_oneof_.plugin_;
}
inline ::frame::proto::Plugin* Texture::mutable_plugin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::frame::proto::Plugin* _msg = _internal_mutable_plugin();
  // @@protoc_insertion_point(field_mutable:frame.proto.Texture.plugin)
  return _msg;
}

// .frame.proto.CubeMapFiles file_names = 15;
inline bool Texture::has_file_names() const {
  return texture_oneof_case() == kFileNames;
}
inline bool Texture::_internal_has_file_names() const {
  return texture_oneof_case() == kFileNames;
}
inline void Texture::set_has_file_names() {
  _impl_._oneof_case_[0] = kFileNames;
}
inline void Texture::clear_file_names() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (texture_oneof_case() == kFileNames) {
    if (GetArena() == nullptr) {
      delete _impl_.texture_oneof_.file_names_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.texture_oneof_.file_names_);
    }
    clear_has_texture_oneof();
  }
}
inline ::frame::proto::CubeMapFiles* Texture::release_file_names() {
  // @@protoc_insertion_point(field_release:frame.proto.Texture.file_names)
  if (texture_oneof_case() == kFileNames) {
    clear_has_texture_oneof();
    auto* temp = _impl_.texture_oneof_.file_names_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.texture_oneof_.file_names_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::CubeMapFiles& Texture::_internal_file_names() const {
  return texture_oneof_case() == kFileNames ? *_impl_.texture_oneof_.file_names_ : reinterpret_cast<::frame::proto::CubeMapFiles&>(::frame::proto::_CubeMapFiles_default_instance_);
}
inline const ::frame::proto::CubeMapFiles& Texture::file_names() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Texture.file_names)
  return _internal_file_names();
}
inline ::frame::proto::CubeMapFiles* Texture::unsafe_arena_release_file_names() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Texture.file_names)
  if (texture_oneof_case() == kFileNames) {
    clear_has_texture_oneof();
    auto* temp = _impl_.texture_oneof_.file_names_;
    _impl_.texture_oneof_.file_names_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Texture::unsafe_arena_set_allocated_file_names(::frame::proto::CubeMapFiles* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_texture_oneof();
  if (value) {
    set_has_file_names();
    _impl_.texture_oneof_.file_names_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Texture.file_names)
}
inline ::frame::proto::CubeMapFiles* Texture::_internal_mutable_file_names() {
  if (texture_oneof_case() != kFileNames) {
    clear_texture_oneof();
    set_has_file_names();
    _impl_.texture_oneof_.file_names_ =
        ::google::protobuf::Message::DefaultConstruct<::frame::proto::CubeMapFiles>(GetArena());
  }
  return _impl_.texture_oneof_.file_names_;
}
inline ::frame::proto::CubeMapFiles* Texture::mutable_file_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::frame::proto::CubeMapFiles* _msg = _internal_mutable_file_names();
  // @@protoc_insertion_point(field_mutable:frame.proto.Texture.file_names)
  return _msg;
}

inline bool Texture::has_texture_oneof() const {
  return texture_oneof_case() != TEXTURE_ONEOF_NOT_SET;
}
inline void Texture::clear_has_texture_oneof() {
  _impl_._oneof_case_[0] = TEXTURE_ONEOF_NOT_SET;
}
inline Texture::TextureOneofCase Texture::texture_oneof_case() const {
  return Texture::TextureOneofCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace frame


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::frame::proto::TextureFilter_Enum> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::frame::proto::TextureFilter_Enum>() {
  return ::frame::proto::TextureFilter_Enum_descriptor();
}
template <>
struct is_proto_enum<::frame::proto::TextureFrame_Enum> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::frame::proto::TextureFrame_Enum>() {
  return ::frame::proto::TextureFrame_Enum_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // texture_2eproto_2epb_2eh
