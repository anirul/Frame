// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uniform.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_uniform_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_uniform_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "math.pb.h"
#include "plugin.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_uniform_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_uniform_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_uniform_2eproto;
namespace frame {
namespace proto {
class Uniform;
struct UniformDefaultTypeInternal;
extern UniformDefaultTypeInternal _Uniform_default_instance_;
}  // namespace proto
}  // namespace frame
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace frame {
namespace proto {
enum Uniform_UniformEnum : int {
  Uniform_UniformEnum_INVALID = 0,
  Uniform_UniformEnum_PROJECTION_MAT4 = 1,
  Uniform_UniformEnum_PROJECTION_INV_MAT4 = 2,
  Uniform_UniformEnum_VIEW_MAT4 = 3,
  Uniform_UniformEnum_VIEW_INV_MAT4 = 4,
  Uniform_UniformEnum_MODEL_MAT4 = 5,
  Uniform_UniformEnum_MODEL_INV_MAT4 = 6,
  Uniform_UniformEnum_FLOAT_TIME_S = 7,
  Uniform_UniformEnum_Uniform_UniformEnum_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Uniform_UniformEnum_Uniform_UniformEnum_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Uniform_UniformEnum_IsValid(int value);
extern const uint32_t Uniform_UniformEnum_internal_data_[];
constexpr Uniform_UniformEnum Uniform_UniformEnum_UniformEnum_MIN = static_cast<Uniform_UniformEnum>(0);
constexpr Uniform_UniformEnum Uniform_UniformEnum_UniformEnum_MAX = static_cast<Uniform_UniformEnum>(7);
constexpr int Uniform_UniformEnum_UniformEnum_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
Uniform_UniformEnum_descriptor();
template <typename T>
const std::string& Uniform_UniformEnum_Name(T value) {
  static_assert(std::is_same<T, Uniform_UniformEnum>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to UniformEnum_Name().");
  return Uniform_UniformEnum_Name(static_cast<Uniform_UniformEnum>(value));
}
template <>
inline const std::string& Uniform_UniformEnum_Name(Uniform_UniformEnum value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Uniform_UniformEnum_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool Uniform_UniformEnum_Parse(absl::string_view name, Uniform_UniformEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Uniform_UniformEnum>(
      Uniform_UniformEnum_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Uniform final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frame.proto.Uniform) */ {
 public:
  inline Uniform() : Uniform(nullptr) {}
  ~Uniform() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Uniform(::google::protobuf::internal::ConstantInitialized);

  inline Uniform(const Uniform& from)
      : Uniform(nullptr, from) {}
  Uniform(Uniform&& from) noexcept
    : Uniform() {
    *this = ::std::move(from);
  }

  inline Uniform& operator=(const Uniform& from) {
    CopyFrom(from);
    return *this;
  }
  inline Uniform& operator=(Uniform&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Uniform& default_instance() {
    return *internal_default_instance();
  }
  enum ValueOneofCase {
    kUniformInt = 2,
    kUniformFloat = 4,
    kUniformFloatPlugin = 19,
    kUniformIntPlugin = 20,
    kUniformEnum = 5,
    kUniformVec2 = 6,
    kUniformVec3 = 7,
    kUniformVec4 = 8,
    kUniformQuat = 9,
    kUniformMat4 = 10,
    kUniformInts = 11,
    kUniformFloats = 13,
    kUniformVec2S = 14,
    kUniformVec3S = 15,
    kUniformVec4S = 16,
    kUniformQuats = 17,
    kUniformMat4S = 18,
    VALUE_ONEOF_NOT_SET = 0,
  };

  static inline const Uniform* internal_default_instance() {
    return reinterpret_cast<const Uniform*>(
               &_Uniform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Uniform& a, Uniform& b) {
    a.Swap(&b);
  }
  inline void Swap(Uniform* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Uniform* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Uniform* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Uniform>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Uniform& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Uniform& from) {
    Uniform::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Uniform* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "frame.proto.Uniform";
  }
  protected:
  explicit Uniform(::google::protobuf::Arena* arena);
  Uniform(::google::protobuf::Arena* arena, const Uniform& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using UniformEnum = Uniform_UniformEnum;
  static constexpr UniformEnum INVALID = Uniform_UniformEnum_INVALID;
  static constexpr UniformEnum PROJECTION_MAT4 = Uniform_UniformEnum_PROJECTION_MAT4;
  static constexpr UniformEnum PROJECTION_INV_MAT4 = Uniform_UniformEnum_PROJECTION_INV_MAT4;
  static constexpr UniformEnum VIEW_MAT4 = Uniform_UniformEnum_VIEW_MAT4;
  static constexpr UniformEnum VIEW_INV_MAT4 = Uniform_UniformEnum_VIEW_INV_MAT4;
  static constexpr UniformEnum MODEL_MAT4 = Uniform_UniformEnum_MODEL_MAT4;
  static constexpr UniformEnum MODEL_INV_MAT4 = Uniform_UniformEnum_MODEL_INV_MAT4;
  static constexpr UniformEnum FLOAT_TIME_S = Uniform_UniformEnum_FLOAT_TIME_S;
  static inline bool UniformEnum_IsValid(int value) {
    return Uniform_UniformEnum_IsValid(value);
  }
  static constexpr UniformEnum UniformEnum_MIN = Uniform_UniformEnum_UniformEnum_MIN;
  static constexpr UniformEnum UniformEnum_MAX = Uniform_UniformEnum_UniformEnum_MAX;
  static constexpr int UniformEnum_ARRAYSIZE = Uniform_UniformEnum_UniformEnum_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* UniformEnum_descriptor() {
    return Uniform_UniformEnum_descriptor();
  }
  template <typename T>
  static inline const std::string& UniformEnum_Name(T value) {
    return Uniform_UniformEnum_Name(value);
  }
  static inline bool UniformEnum_Parse(absl::string_view name, UniformEnum* value) {
    return Uniform_UniformEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kUniformIntFieldNumber = 2,
    kUniformFloatFieldNumber = 4,
    kUniformFloatPluginFieldNumber = 19,
    kUniformIntPluginFieldNumber = 20,
    kUniformEnumFieldNumber = 5,
    kUniformVec2FieldNumber = 6,
    kUniformVec3FieldNumber = 7,
    kUniformVec4FieldNumber = 8,
    kUniformQuatFieldNumber = 9,
    kUniformMat4FieldNumber = 10,
    kUniformIntsFieldNumber = 11,
    kUniformFloatsFieldNumber = 13,
    kUniformVec2SFieldNumber = 14,
    kUniformVec3SFieldNumber = 15,
    kUniformVec4SFieldNumber = 16,
    kUniformQuatsFieldNumber = 17,
    kUniformMat4SFieldNumber = 18,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // int32 uniform_int = 2;
  bool has_uniform_int() const;
  void clear_uniform_int() ;
  ::int32_t uniform_int() const;
  void set_uniform_int(::int32_t value);

  private:
  ::int32_t _internal_uniform_int() const;
  void _internal_set_uniform_int(::int32_t value);

  public:
  // float uniform_float = 4;
  bool has_uniform_float() const;
  void clear_uniform_float() ;
  float uniform_float() const;
  void set_uniform_float(float value);

  private:
  float _internal_uniform_float() const;
  void _internal_set_uniform_float(float value);

  public:
  // .frame.proto.Plugin uniform_float_plugin = 19;
  bool has_uniform_float_plugin() const;
  private:
  bool _internal_has_uniform_float_plugin() const;

  public:
  void clear_uniform_float_plugin() ;
  const ::frame::proto::Plugin& uniform_float_plugin() const;
  PROTOBUF_NODISCARD ::frame::proto::Plugin* release_uniform_float_plugin();
  ::frame::proto::Plugin* mutable_uniform_float_plugin();
  void set_allocated_uniform_float_plugin(::frame::proto::Plugin* value);
  void unsafe_arena_set_allocated_uniform_float_plugin(::frame::proto::Plugin* value);
  ::frame::proto::Plugin* unsafe_arena_release_uniform_float_plugin();

  private:
  const ::frame::proto::Plugin& _internal_uniform_float_plugin() const;
  ::frame::proto::Plugin* _internal_mutable_uniform_float_plugin();

  public:
  // .frame.proto.Plugin uniform_int_plugin = 20;
  bool has_uniform_int_plugin() const;
  private:
  bool _internal_has_uniform_int_plugin() const;

  public:
  void clear_uniform_int_plugin() ;
  const ::frame::proto::Plugin& uniform_int_plugin() const;
  PROTOBUF_NODISCARD ::frame::proto::Plugin* release_uniform_int_plugin();
  ::frame::proto::Plugin* mutable_uniform_int_plugin();
  void set_allocated_uniform_int_plugin(::frame::proto::Plugin* value);
  void unsafe_arena_set_allocated_uniform_int_plugin(::frame::proto::Plugin* value);
  ::frame::proto::Plugin* unsafe_arena_release_uniform_int_plugin();

  private:
  const ::frame::proto::Plugin& _internal_uniform_int_plugin() const;
  ::frame::proto::Plugin* _internal_mutable_uniform_int_plugin();

  public:
  // .frame.proto.Uniform.UniformEnum uniform_enum = 5;
  bool has_uniform_enum() const;
  void clear_uniform_enum() ;
  ::frame::proto::Uniform_UniformEnum uniform_enum() const;
  void set_uniform_enum(::frame::proto::Uniform_UniformEnum value);

  private:
  ::frame::proto::Uniform_UniformEnum _internal_uniform_enum() const;
  void _internal_set_uniform_enum(::frame::proto::Uniform_UniformEnum value);

  public:
  // .frame.proto.UniformVector2 uniform_vec2 = 6;
  bool has_uniform_vec2() const;
  private:
  bool _internal_has_uniform_vec2() const;

  public:
  void clear_uniform_vec2() ;
  const ::frame::proto::UniformVector2& uniform_vec2() const;
  PROTOBUF_NODISCARD ::frame::proto::UniformVector2* release_uniform_vec2();
  ::frame::proto::UniformVector2* mutable_uniform_vec2();
  void set_allocated_uniform_vec2(::frame::proto::UniformVector2* value);
  void unsafe_arena_set_allocated_uniform_vec2(::frame::proto::UniformVector2* value);
  ::frame::proto::UniformVector2* unsafe_arena_release_uniform_vec2();

  private:
  const ::frame::proto::UniformVector2& _internal_uniform_vec2() const;
  ::frame::proto::UniformVector2* _internal_mutable_uniform_vec2();

  public:
  // .frame.proto.UniformVector3 uniform_vec3 = 7;
  bool has_uniform_vec3() const;
  private:
  bool _internal_has_uniform_vec3() const;

  public:
  void clear_uniform_vec3() ;
  const ::frame::proto::UniformVector3& uniform_vec3() const;
  PROTOBUF_NODISCARD ::frame::proto::UniformVector3* release_uniform_vec3();
  ::frame::proto::UniformVector3* mutable_uniform_vec3();
  void set_allocated_uniform_vec3(::frame::proto::UniformVector3* value);
  void unsafe_arena_set_allocated_uniform_vec3(::frame::proto::UniformVector3* value);
  ::frame::proto::UniformVector3* unsafe_arena_release_uniform_vec3();

  private:
  const ::frame::proto::UniformVector3& _internal_uniform_vec3() const;
  ::frame::proto::UniformVector3* _internal_mutable_uniform_vec3();

  public:
  // .frame.proto.UniformVector4 uniform_vec4 = 8;
  bool has_uniform_vec4() const;
  private:
  bool _internal_has_uniform_vec4() const;

  public:
  void clear_uniform_vec4() ;
  const ::frame::proto::UniformVector4& uniform_vec4() const;
  PROTOBUF_NODISCARD ::frame::proto::UniformVector4* release_uniform_vec4();
  ::frame::proto::UniformVector4* mutable_uniform_vec4();
  void set_allocated_uniform_vec4(::frame::proto::UniformVector4* value);
  void unsafe_arena_set_allocated_uniform_vec4(::frame::proto::UniformVector4* value);
  ::frame::proto::UniformVector4* unsafe_arena_release_uniform_vec4();

  private:
  const ::frame::proto::UniformVector4& _internal_uniform_vec4() const;
  ::frame::proto::UniformVector4* _internal_mutable_uniform_vec4();

  public:
  // .frame.proto.UniformQuaternion uniform_quat = 9;
  bool has_uniform_quat() const;
  private:
  bool _internal_has_uniform_quat() const;

  public:
  void clear_uniform_quat() ;
  const ::frame::proto::UniformQuaternion& uniform_quat() const;
  PROTOBUF_NODISCARD ::frame::proto::UniformQuaternion* release_uniform_quat();
  ::frame::proto::UniformQuaternion* mutable_uniform_quat();
  void set_allocated_uniform_quat(::frame::proto::UniformQuaternion* value);
  void unsafe_arena_set_allocated_uniform_quat(::frame::proto::UniformQuaternion* value);
  ::frame::proto::UniformQuaternion* unsafe_arena_release_uniform_quat();

  private:
  const ::frame::proto::UniformQuaternion& _internal_uniform_quat() const;
  ::frame::proto::UniformQuaternion* _internal_mutable_uniform_quat();

  public:
  // .frame.proto.UniformMatrix4 uniform_mat4 = 10;
  bool has_uniform_mat4() const;
  private:
  bool _internal_has_uniform_mat4() const;

  public:
  void clear_uniform_mat4() ;
  const ::frame::proto::UniformMatrix4& uniform_mat4() const;
  PROTOBUF_NODISCARD ::frame::proto::UniformMatrix4* release_uniform_mat4();
  ::frame::proto::UniformMatrix4* mutable_uniform_mat4();
  void set_allocated_uniform_mat4(::frame::proto::UniformMatrix4* value);
  void unsafe_arena_set_allocated_uniform_mat4(::frame::proto::UniformMatrix4* value);
  ::frame::proto::UniformMatrix4* unsafe_arena_release_uniform_mat4();

  private:
  const ::frame::proto::UniformMatrix4& _internal_uniform_mat4() const;
  ::frame::proto::UniformMatrix4* _internal_mutable_uniform_mat4();

  public:
  // .frame.proto.UniformInts uniform_ints = 11;
  bool has_uniform_ints() const;
  private:
  bool _internal_has_uniform_ints() const;

  public:
  void clear_uniform_ints() ;
  const ::frame::proto::UniformInts& uniform_ints() const;
  PROTOBUF_NODISCARD ::frame::proto::UniformInts* release_uniform_ints();
  ::frame::proto::UniformInts* mutable_uniform_ints();
  void set_allocated_uniform_ints(::frame::proto::UniformInts* value);
  void unsafe_arena_set_allocated_uniform_ints(::frame::proto::UniformInts* value);
  ::frame::proto::UniformInts* unsafe_arena_release_uniform_ints();

  private:
  const ::frame::proto::UniformInts& _internal_uniform_ints() const;
  ::frame::proto::UniformInts* _internal_mutable_uniform_ints();

  public:
  // .frame.proto.UniformFloats uniform_floats = 13;
  bool has_uniform_floats() const;
  private:
  bool _internal_has_uniform_floats() const;

  public:
  void clear_uniform_floats() ;
  const ::frame::proto::UniformFloats& uniform_floats() const;
  PROTOBUF_NODISCARD ::frame::proto::UniformFloats* release_uniform_floats();
  ::frame::proto::UniformFloats* mutable_uniform_floats();
  void set_allocated_uniform_floats(::frame::proto::UniformFloats* value);
  void unsafe_arena_set_allocated_uniform_floats(::frame::proto::UniformFloats* value);
  ::frame::proto::UniformFloats* unsafe_arena_release_uniform_floats();

  private:
  const ::frame::proto::UniformFloats& _internal_uniform_floats() const;
  ::frame::proto::UniformFloats* _internal_mutable_uniform_floats();

  public:
  // .frame.proto.UniformVector2s uniform_vec2s = 14;
  bool has_uniform_vec2s() const;
  private:
  bool _internal_has_uniform_vec2s() const;

  public:
  void clear_uniform_vec2s() ;
  const ::frame::proto::UniformVector2s& uniform_vec2s() const;
  PROTOBUF_NODISCARD ::frame::proto::UniformVector2s* release_uniform_vec2s();
  ::frame::proto::UniformVector2s* mutable_uniform_vec2s();
  void set_allocated_uniform_vec2s(::frame::proto::UniformVector2s* value);
  void unsafe_arena_set_allocated_uniform_vec2s(::frame::proto::UniformVector2s* value);
  ::frame::proto::UniformVector2s* unsafe_arena_release_uniform_vec2s();

  private:
  const ::frame::proto::UniformVector2s& _internal_uniform_vec2s() const;
  ::frame::proto::UniformVector2s* _internal_mutable_uniform_vec2s();

  public:
  // .frame.proto.UniformVector3s uniform_vec3s = 15;
  bool has_uniform_vec3s() const;
  private:
  bool _internal_has_uniform_vec3s() const;

  public:
  void clear_uniform_vec3s() ;
  const ::frame::proto::UniformVector3s& uniform_vec3s() const;
  PROTOBUF_NODISCARD ::frame::proto::UniformVector3s* release_uniform_vec3s();
  ::frame::proto::UniformVector3s* mutable_uniform_vec3s();
  void set_allocated_uniform_vec3s(::frame::proto::UniformVector3s* value);
  void unsafe_arena_set_allocated_uniform_vec3s(::frame::proto::UniformVector3s* value);
  ::frame::proto::UniformVector3s* unsafe_arena_release_uniform_vec3s();

  private:
  const ::frame::proto::UniformVector3s& _internal_uniform_vec3s() const;
  ::frame::proto::UniformVector3s* _internal_mutable_uniform_vec3s();

  public:
  // .frame.proto.UniformVector4s uniform_vec4s = 16;
  bool has_uniform_vec4s() const;
  private:
  bool _internal_has_uniform_vec4s() const;

  public:
  void clear_uniform_vec4s() ;
  const ::frame::proto::UniformVector4s& uniform_vec4s() const;
  PROTOBUF_NODISCARD ::frame::proto::UniformVector4s* release_uniform_vec4s();
  ::frame::proto::UniformVector4s* mutable_uniform_vec4s();
  void set_allocated_uniform_vec4s(::frame::proto::UniformVector4s* value);
  void unsafe_arena_set_allocated_uniform_vec4s(::frame::proto::UniformVector4s* value);
  ::frame::proto::UniformVector4s* unsafe_arena_release_uniform_vec4s();

  private:
  const ::frame::proto::UniformVector4s& _internal_uniform_vec4s() const;
  ::frame::proto::UniformVector4s* _internal_mutable_uniform_vec4s();

  public:
  // .frame.proto.UniformQuaternions uniform_quats = 17;
  bool has_uniform_quats() const;
  private:
  bool _internal_has_uniform_quats() const;

  public:
  void clear_uniform_quats() ;
  const ::frame::proto::UniformQuaternions& uniform_quats() const;
  PROTOBUF_NODISCARD ::frame::proto::UniformQuaternions* release_uniform_quats();
  ::frame::proto::UniformQuaternions* mutable_uniform_quats();
  void set_allocated_uniform_quats(::frame::proto::UniformQuaternions* value);
  void unsafe_arena_set_allocated_uniform_quats(::frame::proto::UniformQuaternions* value);
  ::frame::proto::UniformQuaternions* unsafe_arena_release_uniform_quats();

  private:
  const ::frame::proto::UniformQuaternions& _internal_uniform_quats() const;
  ::frame::proto::UniformQuaternions* _internal_mutable_uniform_quats();

  public:
  // .frame.proto.UniformMatrix4s uniform_mat4s = 18;
  bool has_uniform_mat4s() const;
  private:
  bool _internal_has_uniform_mat4s() const;

  public:
  void clear_uniform_mat4s() ;
  const ::frame::proto::UniformMatrix4s& uniform_mat4s() const;
  PROTOBUF_NODISCARD ::frame::proto::UniformMatrix4s* release_uniform_mat4s();
  ::frame::proto::UniformMatrix4s* mutable_uniform_mat4s();
  void set_allocated_uniform_mat4s(::frame::proto::UniformMatrix4s* value);
  void unsafe_arena_set_allocated_uniform_mat4s(::frame::proto::UniformMatrix4s* value);
  ::frame::proto::UniformMatrix4s* unsafe_arena_release_uniform_mat4s();

  private:
  const ::frame::proto::UniformMatrix4s& _internal_uniform_mat4s() const;
  ::frame::proto::UniformMatrix4s* _internal_mutable_uniform_mat4s();

  public:
  void clear_value_oneof();
  ValueOneofCase value_oneof_case() const;
  // @@protoc_insertion_point(class_scope:frame.proto.Uniform)
 private:
  class _Internal;
  void set_has_uniform_int();
  void set_has_uniform_float();
  void set_has_uniform_float_plugin();
  void set_has_uniform_int_plugin();
  void set_has_uniform_enum();
  void set_has_uniform_vec2();
  void set_has_uniform_vec3();
  void set_has_uniform_vec4();
  void set_has_uniform_quat();
  void set_has_uniform_mat4();
  void set_has_uniform_ints();
  void set_has_uniform_floats();
  void set_has_uniform_vec2s();
  void set_has_uniform_vec3s();
  void set_has_uniform_vec4s();
  void set_has_uniform_quats();
  void set_has_uniform_mat4s();

  inline bool has_value_oneof() const;
  inline void clear_has_value_oneof();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 18, 14,
      48, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr name_;
    union ValueOneofUnion {
      constexpr ValueOneofUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::int32_t uniform_int_;
      float uniform_float_;
      ::frame::proto::Plugin* uniform_float_plugin_;
      ::frame::proto::Plugin* uniform_int_plugin_;
      int uniform_enum_;
      ::frame::proto::UniformVector2* uniform_vec2_;
      ::frame::proto::UniformVector3* uniform_vec3_;
      ::frame::proto::UniformVector4* uniform_vec4_;
      ::frame::proto::UniformQuaternion* uniform_quat_;
      ::frame::proto::UniformMatrix4* uniform_mat4_;
      ::frame::proto::UniformInts* uniform_ints_;
      ::frame::proto::UniformFloats* uniform_floats_;
      ::frame::proto::UniformVector2s* uniform_vec2s_;
      ::frame::proto::UniformVector3s* uniform_vec3s_;
      ::frame::proto::UniformVector4s* uniform_vec4s_;
      ::frame::proto::UniformQuaternions* uniform_quats_;
      ::frame::proto::UniformMatrix4s* uniform_mat4s_;
    } value_oneof_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_uniform_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Uniform

// string name = 1;
inline void Uniform::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Uniform::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Uniform::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:frame.proto.Uniform.name)
}
inline std::string* Uniform::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.name)
  return _s;
}
inline const std::string& Uniform::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Uniform::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Uniform::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Uniform::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.name)
  return _impl_.name_.Release();
}
inline void Uniform::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:frame.proto.Uniform.name)
}

// int32 uniform_int = 2;
inline bool Uniform::has_uniform_int() const {
  return value_oneof_case() == kUniformInt;
}
inline void Uniform::set_has_uniform_int() {
  _impl_._oneof_case_[0] = kUniformInt;
}
inline void Uniform::clear_uniform_int() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_oneof_case() == kUniformInt) {
    _impl_.value_oneof_.uniform_int_ = 0;
    clear_has_value_oneof();
  }
}
inline ::int32_t Uniform::uniform_int() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_int)
  return _internal_uniform_int();
}
inline void Uniform::set_uniform_int(::int32_t value) {
  _internal_set_uniform_int(value);
  // @@protoc_insertion_point(field_set:frame.proto.Uniform.uniform_int)
}
inline ::int32_t Uniform::_internal_uniform_int() const {
  if (value_oneof_case() == kUniformInt) {
    return _impl_.value_oneof_.uniform_int_;
  }
  return 0;
}
inline void Uniform::_internal_set_uniform_int(::int32_t value) {
  if (value_oneof_case() != kUniformInt) {
    clear_value_oneof();
    set_has_uniform_int();
  }
  _impl_.value_oneof_.uniform_int_ = value;
}

// float uniform_float = 4;
inline bool Uniform::has_uniform_float() const {
  return value_oneof_case() == kUniformFloat;
}
inline void Uniform::set_has_uniform_float() {
  _impl_._oneof_case_[0] = kUniformFloat;
}
inline void Uniform::clear_uniform_float() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_oneof_case() == kUniformFloat) {
    _impl_.value_oneof_.uniform_float_ = 0;
    clear_has_value_oneof();
  }
}
inline float Uniform::uniform_float() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_float)
  return _internal_uniform_float();
}
inline void Uniform::set_uniform_float(float value) {
  _internal_set_uniform_float(value);
  // @@protoc_insertion_point(field_set:frame.proto.Uniform.uniform_float)
}
inline float Uniform::_internal_uniform_float() const {
  if (value_oneof_case() == kUniformFloat) {
    return _impl_.value_oneof_.uniform_float_;
  }
  return 0;
}
inline void Uniform::_internal_set_uniform_float(float value) {
  if (value_oneof_case() != kUniformFloat) {
    clear_value_oneof();
    set_has_uniform_float();
  }
  _impl_.value_oneof_.uniform_float_ = value;
}

// .frame.proto.Plugin uniform_float_plugin = 19;
inline bool Uniform::has_uniform_float_plugin() const {
  return value_oneof_case() == kUniformFloatPlugin;
}
inline bool Uniform::_internal_has_uniform_float_plugin() const {
  return value_oneof_case() == kUniformFloatPlugin;
}
inline void Uniform::set_has_uniform_float_plugin() {
  _impl_._oneof_case_[0] = kUniformFloatPlugin;
}
inline ::frame::proto::Plugin* Uniform::release_uniform_float_plugin() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_float_plugin)
  if (value_oneof_case() == kUniformFloatPlugin) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.uniform_float_plugin_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.uniform_float_plugin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::Plugin& Uniform::_internal_uniform_float_plugin() const {
  return value_oneof_case() == kUniformFloatPlugin ? *_impl_.value_oneof_.uniform_float_plugin_ : reinterpret_cast<::frame::proto::Plugin&>(::frame::proto::_Plugin_default_instance_);
}
inline const ::frame::proto::Plugin& Uniform::uniform_float_plugin() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_float_plugin)
  return _internal_uniform_float_plugin();
}
inline ::frame::proto::Plugin* Uniform::unsafe_arena_release_uniform_float_plugin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_float_plugin)
  if (value_oneof_case() == kUniformFloatPlugin) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.uniform_float_plugin_;
    _impl_.value_oneof_.uniform_float_plugin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_float_plugin(::frame::proto::Plugin* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value_oneof();
  if (value) {
    set_has_uniform_float_plugin();
    _impl_.value_oneof_.uniform_float_plugin_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_float_plugin)
}
inline ::frame::proto::Plugin* Uniform::_internal_mutable_uniform_float_plugin() {
  if (value_oneof_case() != kUniformFloatPlugin) {
    clear_value_oneof();
    set_has_uniform_float_plugin();
    _impl_.value_oneof_.uniform_float_plugin_ = CreateMaybeMessage<::frame::proto::Plugin>(GetArena());
  }
  return _impl_.value_oneof_.uniform_float_plugin_;
}
inline ::frame::proto::Plugin* Uniform::mutable_uniform_float_plugin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::frame::proto::Plugin* _msg = _internal_mutable_uniform_float_plugin();
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_float_plugin)
  return _msg;
}

// .frame.proto.Plugin uniform_int_plugin = 20;
inline bool Uniform::has_uniform_int_plugin() const {
  return value_oneof_case() == kUniformIntPlugin;
}
inline bool Uniform::_internal_has_uniform_int_plugin() const {
  return value_oneof_case() == kUniformIntPlugin;
}
inline void Uniform::set_has_uniform_int_plugin() {
  _impl_._oneof_case_[0] = kUniformIntPlugin;
}
inline ::frame::proto::Plugin* Uniform::release_uniform_int_plugin() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_int_plugin)
  if (value_oneof_case() == kUniformIntPlugin) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.uniform_int_plugin_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.uniform_int_plugin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::Plugin& Uniform::_internal_uniform_int_plugin() const {
  return value_oneof_case() == kUniformIntPlugin ? *_impl_.value_oneof_.uniform_int_plugin_ : reinterpret_cast<::frame::proto::Plugin&>(::frame::proto::_Plugin_default_instance_);
}
inline const ::frame::proto::Plugin& Uniform::uniform_int_plugin() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_int_plugin)
  return _internal_uniform_int_plugin();
}
inline ::frame::proto::Plugin* Uniform::unsafe_arena_release_uniform_int_plugin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_int_plugin)
  if (value_oneof_case() == kUniformIntPlugin) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.uniform_int_plugin_;
    _impl_.value_oneof_.uniform_int_plugin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_int_plugin(::frame::proto::Plugin* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value_oneof();
  if (value) {
    set_has_uniform_int_plugin();
    _impl_.value_oneof_.uniform_int_plugin_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_int_plugin)
}
inline ::frame::proto::Plugin* Uniform::_internal_mutable_uniform_int_plugin() {
  if (value_oneof_case() != kUniformIntPlugin) {
    clear_value_oneof();
    set_has_uniform_int_plugin();
    _impl_.value_oneof_.uniform_int_plugin_ = CreateMaybeMessage<::frame::proto::Plugin>(GetArena());
  }
  return _impl_.value_oneof_.uniform_int_plugin_;
}
inline ::frame::proto::Plugin* Uniform::mutable_uniform_int_plugin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::frame::proto::Plugin* _msg = _internal_mutable_uniform_int_plugin();
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_int_plugin)
  return _msg;
}

// .frame.proto.Uniform.UniformEnum uniform_enum = 5;
inline bool Uniform::has_uniform_enum() const {
  return value_oneof_case() == kUniformEnum;
}
inline void Uniform::set_has_uniform_enum() {
  _impl_._oneof_case_[0] = kUniformEnum;
}
inline void Uniform::clear_uniform_enum() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_oneof_case() == kUniformEnum) {
    _impl_.value_oneof_.uniform_enum_ = 0;
    clear_has_value_oneof();
  }
}
inline ::frame::proto::Uniform_UniformEnum Uniform::uniform_enum() const {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_enum)
  return _internal_uniform_enum();
}
inline void Uniform::set_uniform_enum(::frame::proto::Uniform_UniformEnum value) {
  _internal_set_uniform_enum(value);
  // @@protoc_insertion_point(field_set:frame.proto.Uniform.uniform_enum)
}
inline ::frame::proto::Uniform_UniformEnum Uniform::_internal_uniform_enum() const {
  if (value_oneof_case() == kUniformEnum) {
    return static_cast<::frame::proto::Uniform_UniformEnum>(_impl_.value_oneof_.uniform_enum_);
  }
  return static_cast<::frame::proto::Uniform_UniformEnum>(0);
}
inline void Uniform::_internal_set_uniform_enum(::frame::proto::Uniform_UniformEnum value) {
  if (value_oneof_case() != kUniformEnum) {
    clear_value_oneof();
    set_has_uniform_enum();
  }
  _impl_.value_oneof_.uniform_enum_ = value;
}

// .frame.proto.UniformVector2 uniform_vec2 = 6;
inline bool Uniform::has_uniform_vec2() const {
  return value_oneof_case() == kUniformVec2;
}
inline bool Uniform::_internal_has_uniform_vec2() const {
  return value_oneof_case() == kUniformVec2;
}
inline void Uniform::set_has_uniform_vec2() {
  _impl_._oneof_case_[0] = kUniformVec2;
}
inline ::frame::proto::UniformVector2* Uniform::release_uniform_vec2() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_vec2)
  if (value_oneof_case() == kUniformVec2) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.uniform_vec2_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.uniform_vec2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformVector2& Uniform::_internal_uniform_vec2() const {
  return value_oneof_case() == kUniformVec2 ? *_impl_.value_oneof_.uniform_vec2_ : reinterpret_cast<::frame::proto::UniformVector2&>(::frame::proto::_UniformVector2_default_instance_);
}
inline const ::frame::proto::UniformVector2& Uniform::uniform_vec2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_vec2)
  return _internal_uniform_vec2();
}
inline ::frame::proto::UniformVector2* Uniform::unsafe_arena_release_uniform_vec2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_vec2)
  if (value_oneof_case() == kUniformVec2) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.uniform_vec2_;
    _impl_.value_oneof_.uniform_vec2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_vec2(::frame::proto::UniformVector2* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value_oneof();
  if (value) {
    set_has_uniform_vec2();
    _impl_.value_oneof_.uniform_vec2_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_vec2)
}
inline ::frame::proto::UniformVector2* Uniform::_internal_mutable_uniform_vec2() {
  if (value_oneof_case() != kUniformVec2) {
    clear_value_oneof();
    set_has_uniform_vec2();
    _impl_.value_oneof_.uniform_vec2_ = CreateMaybeMessage<::frame::proto::UniformVector2>(GetArena());
  }
  return _impl_.value_oneof_.uniform_vec2_;
}
inline ::frame::proto::UniformVector2* Uniform::mutable_uniform_vec2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::frame::proto::UniformVector2* _msg = _internal_mutable_uniform_vec2();
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_vec2)
  return _msg;
}

// .frame.proto.UniformVector3 uniform_vec3 = 7;
inline bool Uniform::has_uniform_vec3() const {
  return value_oneof_case() == kUniformVec3;
}
inline bool Uniform::_internal_has_uniform_vec3() const {
  return value_oneof_case() == kUniformVec3;
}
inline void Uniform::set_has_uniform_vec3() {
  _impl_._oneof_case_[0] = kUniformVec3;
}
inline ::frame::proto::UniformVector3* Uniform::release_uniform_vec3() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_vec3)
  if (value_oneof_case() == kUniformVec3) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.uniform_vec3_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.uniform_vec3_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformVector3& Uniform::_internal_uniform_vec3() const {
  return value_oneof_case() == kUniformVec3 ? *_impl_.value_oneof_.uniform_vec3_ : reinterpret_cast<::frame::proto::UniformVector3&>(::frame::proto::_UniformVector3_default_instance_);
}
inline const ::frame::proto::UniformVector3& Uniform::uniform_vec3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_vec3)
  return _internal_uniform_vec3();
}
inline ::frame::proto::UniformVector3* Uniform::unsafe_arena_release_uniform_vec3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_vec3)
  if (value_oneof_case() == kUniformVec3) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.uniform_vec3_;
    _impl_.value_oneof_.uniform_vec3_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_vec3(::frame::proto::UniformVector3* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value_oneof();
  if (value) {
    set_has_uniform_vec3();
    _impl_.value_oneof_.uniform_vec3_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_vec3)
}
inline ::frame::proto::UniformVector3* Uniform::_internal_mutable_uniform_vec3() {
  if (value_oneof_case() != kUniformVec3) {
    clear_value_oneof();
    set_has_uniform_vec3();
    _impl_.value_oneof_.uniform_vec3_ = CreateMaybeMessage<::frame::proto::UniformVector3>(GetArena());
  }
  return _impl_.value_oneof_.uniform_vec3_;
}
inline ::frame::proto::UniformVector3* Uniform::mutable_uniform_vec3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::frame::proto::UniformVector3* _msg = _internal_mutable_uniform_vec3();
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_vec3)
  return _msg;
}

// .frame.proto.UniformVector4 uniform_vec4 = 8;
inline bool Uniform::has_uniform_vec4() const {
  return value_oneof_case() == kUniformVec4;
}
inline bool Uniform::_internal_has_uniform_vec4() const {
  return value_oneof_case() == kUniformVec4;
}
inline void Uniform::set_has_uniform_vec4() {
  _impl_._oneof_case_[0] = kUniformVec4;
}
inline ::frame::proto::UniformVector4* Uniform::release_uniform_vec4() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_vec4)
  if (value_oneof_case() == kUniformVec4) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.uniform_vec4_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.uniform_vec4_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformVector4& Uniform::_internal_uniform_vec4() const {
  return value_oneof_case() == kUniformVec4 ? *_impl_.value_oneof_.uniform_vec4_ : reinterpret_cast<::frame::proto::UniformVector4&>(::frame::proto::_UniformVector4_default_instance_);
}
inline const ::frame::proto::UniformVector4& Uniform::uniform_vec4() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_vec4)
  return _internal_uniform_vec4();
}
inline ::frame::proto::UniformVector4* Uniform::unsafe_arena_release_uniform_vec4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_vec4)
  if (value_oneof_case() == kUniformVec4) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.uniform_vec4_;
    _impl_.value_oneof_.uniform_vec4_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_vec4(::frame::proto::UniformVector4* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value_oneof();
  if (value) {
    set_has_uniform_vec4();
    _impl_.value_oneof_.uniform_vec4_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_vec4)
}
inline ::frame::proto::UniformVector4* Uniform::_internal_mutable_uniform_vec4() {
  if (value_oneof_case() != kUniformVec4) {
    clear_value_oneof();
    set_has_uniform_vec4();
    _impl_.value_oneof_.uniform_vec4_ = CreateMaybeMessage<::frame::proto::UniformVector4>(GetArena());
  }
  return _impl_.value_oneof_.uniform_vec4_;
}
inline ::frame::proto::UniformVector4* Uniform::mutable_uniform_vec4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::frame::proto::UniformVector4* _msg = _internal_mutable_uniform_vec4();
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_vec4)
  return _msg;
}

// .frame.proto.UniformQuaternion uniform_quat = 9;
inline bool Uniform::has_uniform_quat() const {
  return value_oneof_case() == kUniformQuat;
}
inline bool Uniform::_internal_has_uniform_quat() const {
  return value_oneof_case() == kUniformQuat;
}
inline void Uniform::set_has_uniform_quat() {
  _impl_._oneof_case_[0] = kUniformQuat;
}
inline ::frame::proto::UniformQuaternion* Uniform::release_uniform_quat() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_quat)
  if (value_oneof_case() == kUniformQuat) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.uniform_quat_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.uniform_quat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformQuaternion& Uniform::_internal_uniform_quat() const {
  return value_oneof_case() == kUniformQuat ? *_impl_.value_oneof_.uniform_quat_ : reinterpret_cast<::frame::proto::UniformQuaternion&>(::frame::proto::_UniformQuaternion_default_instance_);
}
inline const ::frame::proto::UniformQuaternion& Uniform::uniform_quat() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_quat)
  return _internal_uniform_quat();
}
inline ::frame::proto::UniformQuaternion* Uniform::unsafe_arena_release_uniform_quat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_quat)
  if (value_oneof_case() == kUniformQuat) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.uniform_quat_;
    _impl_.value_oneof_.uniform_quat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_quat(::frame::proto::UniformQuaternion* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value_oneof();
  if (value) {
    set_has_uniform_quat();
    _impl_.value_oneof_.uniform_quat_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_quat)
}
inline ::frame::proto::UniformQuaternion* Uniform::_internal_mutable_uniform_quat() {
  if (value_oneof_case() != kUniformQuat) {
    clear_value_oneof();
    set_has_uniform_quat();
    _impl_.value_oneof_.uniform_quat_ = CreateMaybeMessage<::frame::proto::UniformQuaternion>(GetArena());
  }
  return _impl_.value_oneof_.uniform_quat_;
}
inline ::frame::proto::UniformQuaternion* Uniform::mutable_uniform_quat() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::frame::proto::UniformQuaternion* _msg = _internal_mutable_uniform_quat();
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_quat)
  return _msg;
}

// .frame.proto.UniformMatrix4 uniform_mat4 = 10;
inline bool Uniform::has_uniform_mat4() const {
  return value_oneof_case() == kUniformMat4;
}
inline bool Uniform::_internal_has_uniform_mat4() const {
  return value_oneof_case() == kUniformMat4;
}
inline void Uniform::set_has_uniform_mat4() {
  _impl_._oneof_case_[0] = kUniformMat4;
}
inline ::frame::proto::UniformMatrix4* Uniform::release_uniform_mat4() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_mat4)
  if (value_oneof_case() == kUniformMat4) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.uniform_mat4_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.uniform_mat4_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformMatrix4& Uniform::_internal_uniform_mat4() const {
  return value_oneof_case() == kUniformMat4 ? *_impl_.value_oneof_.uniform_mat4_ : reinterpret_cast<::frame::proto::UniformMatrix4&>(::frame::proto::_UniformMatrix4_default_instance_);
}
inline const ::frame::proto::UniformMatrix4& Uniform::uniform_mat4() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_mat4)
  return _internal_uniform_mat4();
}
inline ::frame::proto::UniformMatrix4* Uniform::unsafe_arena_release_uniform_mat4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_mat4)
  if (value_oneof_case() == kUniformMat4) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.uniform_mat4_;
    _impl_.value_oneof_.uniform_mat4_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_mat4(::frame::proto::UniformMatrix4* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value_oneof();
  if (value) {
    set_has_uniform_mat4();
    _impl_.value_oneof_.uniform_mat4_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_mat4)
}
inline ::frame::proto::UniformMatrix4* Uniform::_internal_mutable_uniform_mat4() {
  if (value_oneof_case() != kUniformMat4) {
    clear_value_oneof();
    set_has_uniform_mat4();
    _impl_.value_oneof_.uniform_mat4_ = CreateMaybeMessage<::frame::proto::UniformMatrix4>(GetArena());
  }
  return _impl_.value_oneof_.uniform_mat4_;
}
inline ::frame::proto::UniformMatrix4* Uniform::mutable_uniform_mat4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::frame::proto::UniformMatrix4* _msg = _internal_mutable_uniform_mat4();
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_mat4)
  return _msg;
}

// .frame.proto.UniformInts uniform_ints = 11;
inline bool Uniform::has_uniform_ints() const {
  return value_oneof_case() == kUniformInts;
}
inline bool Uniform::_internal_has_uniform_ints() const {
  return value_oneof_case() == kUniformInts;
}
inline void Uniform::set_has_uniform_ints() {
  _impl_._oneof_case_[0] = kUniformInts;
}
inline ::frame::proto::UniformInts* Uniform::release_uniform_ints() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_ints)
  if (value_oneof_case() == kUniformInts) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.uniform_ints_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.uniform_ints_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformInts& Uniform::_internal_uniform_ints() const {
  return value_oneof_case() == kUniformInts ? *_impl_.value_oneof_.uniform_ints_ : reinterpret_cast<::frame::proto::UniformInts&>(::frame::proto::_UniformInts_default_instance_);
}
inline const ::frame::proto::UniformInts& Uniform::uniform_ints() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_ints)
  return _internal_uniform_ints();
}
inline ::frame::proto::UniformInts* Uniform::unsafe_arena_release_uniform_ints() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_ints)
  if (value_oneof_case() == kUniformInts) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.uniform_ints_;
    _impl_.value_oneof_.uniform_ints_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_ints(::frame::proto::UniformInts* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value_oneof();
  if (value) {
    set_has_uniform_ints();
    _impl_.value_oneof_.uniform_ints_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_ints)
}
inline ::frame::proto::UniformInts* Uniform::_internal_mutable_uniform_ints() {
  if (value_oneof_case() != kUniformInts) {
    clear_value_oneof();
    set_has_uniform_ints();
    _impl_.value_oneof_.uniform_ints_ = CreateMaybeMessage<::frame::proto::UniformInts>(GetArena());
  }
  return _impl_.value_oneof_.uniform_ints_;
}
inline ::frame::proto::UniformInts* Uniform::mutable_uniform_ints() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::frame::proto::UniformInts* _msg = _internal_mutable_uniform_ints();
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_ints)
  return _msg;
}

// .frame.proto.UniformFloats uniform_floats = 13;
inline bool Uniform::has_uniform_floats() const {
  return value_oneof_case() == kUniformFloats;
}
inline bool Uniform::_internal_has_uniform_floats() const {
  return value_oneof_case() == kUniformFloats;
}
inline void Uniform::set_has_uniform_floats() {
  _impl_._oneof_case_[0] = kUniformFloats;
}
inline ::frame::proto::UniformFloats* Uniform::release_uniform_floats() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_floats)
  if (value_oneof_case() == kUniformFloats) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.uniform_floats_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.uniform_floats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformFloats& Uniform::_internal_uniform_floats() const {
  return value_oneof_case() == kUniformFloats ? *_impl_.value_oneof_.uniform_floats_ : reinterpret_cast<::frame::proto::UniformFloats&>(::frame::proto::_UniformFloats_default_instance_);
}
inline const ::frame::proto::UniformFloats& Uniform::uniform_floats() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_floats)
  return _internal_uniform_floats();
}
inline ::frame::proto::UniformFloats* Uniform::unsafe_arena_release_uniform_floats() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_floats)
  if (value_oneof_case() == kUniformFloats) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.uniform_floats_;
    _impl_.value_oneof_.uniform_floats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_floats(::frame::proto::UniformFloats* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value_oneof();
  if (value) {
    set_has_uniform_floats();
    _impl_.value_oneof_.uniform_floats_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_floats)
}
inline ::frame::proto::UniformFloats* Uniform::_internal_mutable_uniform_floats() {
  if (value_oneof_case() != kUniformFloats) {
    clear_value_oneof();
    set_has_uniform_floats();
    _impl_.value_oneof_.uniform_floats_ = CreateMaybeMessage<::frame::proto::UniformFloats>(GetArena());
  }
  return _impl_.value_oneof_.uniform_floats_;
}
inline ::frame::proto::UniformFloats* Uniform::mutable_uniform_floats() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::frame::proto::UniformFloats* _msg = _internal_mutable_uniform_floats();
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_floats)
  return _msg;
}

// .frame.proto.UniformVector2s uniform_vec2s = 14;
inline bool Uniform::has_uniform_vec2s() const {
  return value_oneof_case() == kUniformVec2S;
}
inline bool Uniform::_internal_has_uniform_vec2s() const {
  return value_oneof_case() == kUniformVec2S;
}
inline void Uniform::set_has_uniform_vec2s() {
  _impl_._oneof_case_[0] = kUniformVec2S;
}
inline ::frame::proto::UniformVector2s* Uniform::release_uniform_vec2s() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_vec2s)
  if (value_oneof_case() == kUniformVec2S) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.uniform_vec2s_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.uniform_vec2s_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformVector2s& Uniform::_internal_uniform_vec2s() const {
  return value_oneof_case() == kUniformVec2S ? *_impl_.value_oneof_.uniform_vec2s_ : reinterpret_cast<::frame::proto::UniformVector2s&>(::frame::proto::_UniformVector2s_default_instance_);
}
inline const ::frame::proto::UniformVector2s& Uniform::uniform_vec2s() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_vec2s)
  return _internal_uniform_vec2s();
}
inline ::frame::proto::UniformVector2s* Uniform::unsafe_arena_release_uniform_vec2s() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_vec2s)
  if (value_oneof_case() == kUniformVec2S) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.uniform_vec2s_;
    _impl_.value_oneof_.uniform_vec2s_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_vec2s(::frame::proto::UniformVector2s* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value_oneof();
  if (value) {
    set_has_uniform_vec2s();
    _impl_.value_oneof_.uniform_vec2s_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_vec2s)
}
inline ::frame::proto::UniformVector2s* Uniform::_internal_mutable_uniform_vec2s() {
  if (value_oneof_case() != kUniformVec2S) {
    clear_value_oneof();
    set_has_uniform_vec2s();
    _impl_.value_oneof_.uniform_vec2s_ = CreateMaybeMessage<::frame::proto::UniformVector2s>(GetArena());
  }
  return _impl_.value_oneof_.uniform_vec2s_;
}
inline ::frame::proto::UniformVector2s* Uniform::mutable_uniform_vec2s() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::frame::proto::UniformVector2s* _msg = _internal_mutable_uniform_vec2s();
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_vec2s)
  return _msg;
}

// .frame.proto.UniformVector3s uniform_vec3s = 15;
inline bool Uniform::has_uniform_vec3s() const {
  return value_oneof_case() == kUniformVec3S;
}
inline bool Uniform::_internal_has_uniform_vec3s() const {
  return value_oneof_case() == kUniformVec3S;
}
inline void Uniform::set_has_uniform_vec3s() {
  _impl_._oneof_case_[0] = kUniformVec3S;
}
inline ::frame::proto::UniformVector3s* Uniform::release_uniform_vec3s() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_vec3s)
  if (value_oneof_case() == kUniformVec3S) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.uniform_vec3s_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.uniform_vec3s_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformVector3s& Uniform::_internal_uniform_vec3s() const {
  return value_oneof_case() == kUniformVec3S ? *_impl_.value_oneof_.uniform_vec3s_ : reinterpret_cast<::frame::proto::UniformVector3s&>(::frame::proto::_UniformVector3s_default_instance_);
}
inline const ::frame::proto::UniformVector3s& Uniform::uniform_vec3s() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_vec3s)
  return _internal_uniform_vec3s();
}
inline ::frame::proto::UniformVector3s* Uniform::unsafe_arena_release_uniform_vec3s() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_vec3s)
  if (value_oneof_case() == kUniformVec3S) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.uniform_vec3s_;
    _impl_.value_oneof_.uniform_vec3s_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_vec3s(::frame::proto::UniformVector3s* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value_oneof();
  if (value) {
    set_has_uniform_vec3s();
    _impl_.value_oneof_.uniform_vec3s_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_vec3s)
}
inline ::frame::proto::UniformVector3s* Uniform::_internal_mutable_uniform_vec3s() {
  if (value_oneof_case() != kUniformVec3S) {
    clear_value_oneof();
    set_has_uniform_vec3s();
    _impl_.value_oneof_.uniform_vec3s_ = CreateMaybeMessage<::frame::proto::UniformVector3s>(GetArena());
  }
  return _impl_.value_oneof_.uniform_vec3s_;
}
inline ::frame::proto::UniformVector3s* Uniform::mutable_uniform_vec3s() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::frame::proto::UniformVector3s* _msg = _internal_mutable_uniform_vec3s();
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_vec3s)
  return _msg;
}

// .frame.proto.UniformVector4s uniform_vec4s = 16;
inline bool Uniform::has_uniform_vec4s() const {
  return value_oneof_case() == kUniformVec4S;
}
inline bool Uniform::_internal_has_uniform_vec4s() const {
  return value_oneof_case() == kUniformVec4S;
}
inline void Uniform::set_has_uniform_vec4s() {
  _impl_._oneof_case_[0] = kUniformVec4S;
}
inline ::frame::proto::UniformVector4s* Uniform::release_uniform_vec4s() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_vec4s)
  if (value_oneof_case() == kUniformVec4S) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.uniform_vec4s_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.uniform_vec4s_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformVector4s& Uniform::_internal_uniform_vec4s() const {
  return value_oneof_case() == kUniformVec4S ? *_impl_.value_oneof_.uniform_vec4s_ : reinterpret_cast<::frame::proto::UniformVector4s&>(::frame::proto::_UniformVector4s_default_instance_);
}
inline const ::frame::proto::UniformVector4s& Uniform::uniform_vec4s() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_vec4s)
  return _internal_uniform_vec4s();
}
inline ::frame::proto::UniformVector4s* Uniform::unsafe_arena_release_uniform_vec4s() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_vec4s)
  if (value_oneof_case() == kUniformVec4S) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.uniform_vec4s_;
    _impl_.value_oneof_.uniform_vec4s_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_vec4s(::frame::proto::UniformVector4s* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value_oneof();
  if (value) {
    set_has_uniform_vec4s();
    _impl_.value_oneof_.uniform_vec4s_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_vec4s)
}
inline ::frame::proto::UniformVector4s* Uniform::_internal_mutable_uniform_vec4s() {
  if (value_oneof_case() != kUniformVec4S) {
    clear_value_oneof();
    set_has_uniform_vec4s();
    _impl_.value_oneof_.uniform_vec4s_ = CreateMaybeMessage<::frame::proto::UniformVector4s>(GetArena());
  }
  return _impl_.value_oneof_.uniform_vec4s_;
}
inline ::frame::proto::UniformVector4s* Uniform::mutable_uniform_vec4s() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::frame::proto::UniformVector4s* _msg = _internal_mutable_uniform_vec4s();
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_vec4s)
  return _msg;
}

// .frame.proto.UniformQuaternions uniform_quats = 17;
inline bool Uniform::has_uniform_quats() const {
  return value_oneof_case() == kUniformQuats;
}
inline bool Uniform::_internal_has_uniform_quats() const {
  return value_oneof_case() == kUniformQuats;
}
inline void Uniform::set_has_uniform_quats() {
  _impl_._oneof_case_[0] = kUniformQuats;
}
inline ::frame::proto::UniformQuaternions* Uniform::release_uniform_quats() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_quats)
  if (value_oneof_case() == kUniformQuats) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.uniform_quats_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.uniform_quats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformQuaternions& Uniform::_internal_uniform_quats() const {
  return value_oneof_case() == kUniformQuats ? *_impl_.value_oneof_.uniform_quats_ : reinterpret_cast<::frame::proto::UniformQuaternions&>(::frame::proto::_UniformQuaternions_default_instance_);
}
inline const ::frame::proto::UniformQuaternions& Uniform::uniform_quats() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_quats)
  return _internal_uniform_quats();
}
inline ::frame::proto::UniformQuaternions* Uniform::unsafe_arena_release_uniform_quats() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_quats)
  if (value_oneof_case() == kUniformQuats) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.uniform_quats_;
    _impl_.value_oneof_.uniform_quats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_quats(::frame::proto::UniformQuaternions* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value_oneof();
  if (value) {
    set_has_uniform_quats();
    _impl_.value_oneof_.uniform_quats_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_quats)
}
inline ::frame::proto::UniformQuaternions* Uniform::_internal_mutable_uniform_quats() {
  if (value_oneof_case() != kUniformQuats) {
    clear_value_oneof();
    set_has_uniform_quats();
    _impl_.value_oneof_.uniform_quats_ = CreateMaybeMessage<::frame::proto::UniformQuaternions>(GetArena());
  }
  return _impl_.value_oneof_.uniform_quats_;
}
inline ::frame::proto::UniformQuaternions* Uniform::mutable_uniform_quats() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::frame::proto::UniformQuaternions* _msg = _internal_mutable_uniform_quats();
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_quats)
  return _msg;
}

// .frame.proto.UniformMatrix4s uniform_mat4s = 18;
inline bool Uniform::has_uniform_mat4s() const {
  return value_oneof_case() == kUniformMat4S;
}
inline bool Uniform::_internal_has_uniform_mat4s() const {
  return value_oneof_case() == kUniformMat4S;
}
inline void Uniform::set_has_uniform_mat4s() {
  _impl_._oneof_case_[0] = kUniformMat4S;
}
inline ::frame::proto::UniformMatrix4s* Uniform::release_uniform_mat4s() {
  // @@protoc_insertion_point(field_release:frame.proto.Uniform.uniform_mat4s)
  if (value_oneof_case() == kUniformMat4S) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.uniform_mat4s_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_oneof_.uniform_mat4s_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::frame::proto::UniformMatrix4s& Uniform::_internal_uniform_mat4s() const {
  return value_oneof_case() == kUniformMat4S ? *_impl_.value_oneof_.uniform_mat4s_ : reinterpret_cast<::frame::proto::UniformMatrix4s&>(::frame::proto::_UniformMatrix4s_default_instance_);
}
inline const ::frame::proto::UniformMatrix4s& Uniform::uniform_mat4s() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:frame.proto.Uniform.uniform_mat4s)
  return _internal_uniform_mat4s();
}
inline ::frame::proto::UniformMatrix4s* Uniform::unsafe_arena_release_uniform_mat4s() {
  // @@protoc_insertion_point(field_unsafe_arena_release:frame.proto.Uniform.uniform_mat4s)
  if (value_oneof_case() == kUniformMat4S) {
    clear_has_value_oneof();
    auto* temp = _impl_.value_oneof_.uniform_mat4s_;
    _impl_.value_oneof_.uniform_mat4s_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Uniform::unsafe_arena_set_allocated_uniform_mat4s(::frame::proto::UniformMatrix4s* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value_oneof();
  if (value) {
    set_has_uniform_mat4s();
    _impl_.value_oneof_.uniform_mat4s_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:frame.proto.Uniform.uniform_mat4s)
}
inline ::frame::proto::UniformMatrix4s* Uniform::_internal_mutable_uniform_mat4s() {
  if (value_oneof_case() != kUniformMat4S) {
    clear_value_oneof();
    set_has_uniform_mat4s();
    _impl_.value_oneof_.uniform_mat4s_ = CreateMaybeMessage<::frame::proto::UniformMatrix4s>(GetArena());
  }
  return _impl_.value_oneof_.uniform_mat4s_;
}
inline ::frame::proto::UniformMatrix4s* Uniform::mutable_uniform_mat4s() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::frame::proto::UniformMatrix4s* _msg = _internal_mutable_uniform_mat4s();
  // @@protoc_insertion_point(field_mutable:frame.proto.Uniform.uniform_mat4s)
  return _msg;
}

inline bool Uniform::has_value_oneof() const {
  return value_oneof_case() != VALUE_ONEOF_NOT_SET;
}
inline void Uniform::clear_has_value_oneof() {
  _impl_._oneof_case_[0] = VALUE_ONEOF_NOT_SET;
}
inline Uniform::ValueOneofCase Uniform::value_oneof_case() const {
  return Uniform::ValueOneofCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace frame


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::frame::proto::Uniform_UniformEnum> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::frame::proto::Uniform_UniformEnum>() {
  return ::frame::proto::Uniform_UniformEnum_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_uniform_2eproto_2epb_2eh
